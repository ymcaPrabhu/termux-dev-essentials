#!/usr/bin/env node

/**
 * BMad Story 1.5: Command Shim Generation
 * 
 * Generates wrapper scripts (shims) for tools installed in proot-distro Ubuntu
 * to make them seamlessly callable from the main Termux shell.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const PREFIX = process.env.PREFIX || '/data/data/com.termux/files/usr';
const SHIM_DIR = path.join(PREFIX, 'bin');
const SHIMS_MANIFEST = path.join(__dirname, '../.shims-manifest.json');

/**
 * Task 2: Generate shim script content
 */
function generateShimContent(commandName) {
  return `#!/data/data/com.termux/files/usr/bin/sh
# Auto-generated shim for ${commandName} (installed in proot-distro Ubuntu)
# Generated by BMad Story 1.5

exec proot-distro login ubuntu -- ${commandName} "$@"
`;
}

/**
 * Task 1 & 3: Create shim file and set permissions
 */
function createShim(commandName) {
  const shimPath = path.join(SHIM_DIR, commandName);
  
  console.log(`📝 Generating shim for '${commandName}' at ${shimPath}...`);
  
  // Check if shim already exists
  if (fs.existsSync(shimPath)) {
    console.log(`⚠️  Shim already exists for '${commandName}'. Overwriting...`);
  }
  
  try {
    // Task 2: Write shim content
    const shimContent = generateShimContent(commandName);
    fs.writeFileSync(shimPath, shimContent, { mode: 0o755 });
    
    // Task 3: Ensure executable permissions (already set via mode above)
    // Additional chmod for safety on systems where mode doesn't work
    try {
      execSync(`chmod +x "${shimPath}"`, { stdio: 'ignore' });
    } catch {
      // Ignore chmod errors on non-Unix systems (e.g., Windows)
    }
    
    console.log(`✅ Successfully created shim for '${commandName}'.`);
    
    // Update manifest
    updateShimManifest(commandName, shimPath);
    
    return true;
  } catch (error) {
    console.error(`❌ Failed to create shim for '${commandName}':`, error.message);
    return false;
  }
}

/**
 * Update the shims manifest file
 */
function updateShimManifest(commandName, shimPath) {
  let manifest = {};
  
  if (fs.existsSync(SHIMS_MANIFEST)) {
    try {
      manifest = JSON.parse(fs.readFileSync(SHIMS_MANIFEST, 'utf8'));
    } catch {
      console.log('⚠️  Could not read existing manifest, creating new one.');
    }
  }
  
  manifest[commandName] = {
    shimPath,
    createdAt: new Date().toISOString(),
  };
  
  fs.writeFileSync(SHIMS_MANIFEST, JSON.stringify(manifest, null, 2));
}

/**
 * Remove a shim
 */
function removeShim(commandName) {
  const shimPath = path.join(SHIM_DIR, commandName);
  
  if (!fs.existsSync(shimPath)) {
    console.log(`⚠️  No shim found for '${commandName}'.`);
    return false;
  }
  
  try {
    fs.unlinkSync(shimPath);
    console.log(`✅ Removed shim for '${commandName}'.`);
    
    // Update manifest
    if (fs.existsSync(SHIMS_MANIFEST)) {
      const manifest = JSON.parse(fs.readFileSync(SHIMS_MANIFEST, 'utf8'));
      delete manifest[commandName];
      fs.writeFileSync(SHIMS_MANIFEST, JSON.stringify(manifest, null, 2));
    }
    
    return true;
  } catch (error) {
    console.error(`❌ Failed to remove shim for '${commandName}':`, error.message);
    return false;
  }
}

/**
 * List all created shims
 */
function listShims() {
  if (!fs.existsSync(SHIMS_MANIFEST)) {
    console.log('No shims have been created yet.');
    return {};
  }
  
  try {
    const manifest = JSON.parse(fs.readFileSync(SHIMS_MANIFEST, 'utf8'));
    
    console.log('\n' + '='.repeat(60));
    console.log('Created Shims');
    console.log('='.repeat(60));
    
    Object.entries(manifest).forEach(([cmd, info]) => {
      console.log(`  ${cmd}`);
      console.log(`    Path: ${info.shimPath}`);
      console.log(`    Created: ${info.createdAt}`);
    });
    
    return manifest;
  } catch (error) {
    console.error('Failed to read shims manifest:', error.message);
    return {};
  }
}

/**
 * Main CLI handler
 */
function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log(`
Usage:
  node generate-shims.js <command>       Create a shim for the command
  node generate-shims.js --remove <cmd>  Remove a shim
  node generate-shims.js --list          List all shims

Example:
  node generate-shims.js gemini-cli
  node generate-shims.js --remove gemini-cli
  node generate-shims.js --list
    `);
    process.exit(1);
  }
  
  const command = args[0];
  
  if (command === '--list') {
    listShims();
  } else if (command === '--remove' && args[1]) {
    removeShim(args[1]);
  } else {
    createShim(command);
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { createShim, removeShim, listShims, generateShimContent };
