var colors = require('colors'),
    mongo = require('mongodb'),
    fs = require('fs'),
    crypto = require('crypto'),
    path = require('path');

module.exports = function(cli) {
    var cliName = 'codex.' + 'js'.red,
        codexVersion = '0.1.0',
        dbinfo = null;

    function sendMessage(msg) {
        console.log(cliName + ': ' + msg.grey);
    }

    function sendSuccess(msg) {
        console.log(cliName + ': ' + msg.cyan);
    }

    function sendError(err) {
        console.log(cliName + ': ' + JSON.stringify(err).red);
    }

    function createSalt() {
        var data = crypto.randomBytes(256);

        return crypto
            .createHash('md5')
            .update(data)
            .digest("hex");
    }

    function createHash(pass, salt) {
        var data = pass + '|' + salt;

        return crypto
            .createHash('md5')
            .update(data)
            .digest("hex");
    }

    var CodexCLI = {
        createBlogFolder: function(blogName, callback) {
            cli.execute('mkdir ' + blogName, callback);
        },

        checkoutBlogFiles: function(blogName, callback) {
            cli.execute('git clone https://github.com/stephanepericat/codex.js.git ' + blogName, callback);
        },

        createConfigFile: function(blogName, callback) {
            var schema = [
                {
                    description: 'MongoDB Host',
                    name: 'host',
                    required: true
                },
                {
                    description: 'MongoDB Port',
                    name: 'port',
                    pattern: /[0-9]+/,
                    message: 'Port must be a number',
                    required: true
                },
                {
                    description: 'MongoDB DB Name',
                    name: 'db',
                    required: true
                },
                {
                    description: 'MongoDB Username',
                    name: 'user',
                    required: false
                },
                {
                    description: 'MongoDB Password',
                    name: 'password',
                    hidden: true,
                    required: false
                }
            ];

            cli.prompt(schema, function (err, dbconf) {
                if(err) throw err;

                var URL;

                if(dbconf.user && dbconf.password) {
                    URL = 'mongodb://' + dbconf.user + ':' + dbconf.password + '@' + dbconf.host + ':' + dbconf.port + '/' + dbconf.db;
                } else {
                    URL = 'mongodb://' + dbconf.host + ':' + dbconf.port + '/' + dbconf.db;
                }

                mongo.connect(URL, function(err, db) {
                    if(db) db.close();
                    if(err) {
                        sendError('Something went wrong, please try again.' + JSON.stringify(err));
                        CodexCLI.createConfigFile(blogName, callback);
                    } else {
                        var config = {
                            'mongodb': dbconf
                        };
                        dbinfo = dbconf;
                        // NEW ! by default, create a development config file
                        fs.writeFile(blogName + '/config.development.json', JSON.stringify(config), callback);
                    }
                });
            });
        },

        createBlogAdmin: function (blogName, callback) {
            var schema = [
                {
                    description: blogName + ' Username',
                    name: 'user',
                    required: true
                },
                {
                    description: blogName + ' Password',
                    name: 'password',
                    hidden: true,
                    required: true
                }
            ];

            cli.prompt(schema, function (err, userInfo) {
                if(err) throw err;

                if(dbinfo) {
                    var URL;

                    if(dbinfo.user && dbinfo.password) {
                        URL = 'mongodb://' + dbinfo.user + ':' + dbinfo.password + '@' + dbinfo.host + ':' + dbinfo.port + '/' + dbinfo.db;
                    } else {
                        URL = 'mongodb://' + dbinfo.host + ':' + dbinfo.port + '/' + dbinfo.db;
                    }

                    mongo.connect(URL, function(err, db) {
                        if(err) {
                            sendError('Something went wront, please try again.' + JSON.stringify(err));
                            CodexCLI.createBlogAdmin(blogName, callback);
                        } else {
                            var salt = createSalt(),
                                hash = createHash(userInfo.password, salt);

                            db.collection('users').insert({
                                username: userInfo.user,
                                salt: salt,
                                hash: hash,
                                __v: 0
                            }, function(err, res) {
                                db.close();
                                if(err) {
                                    sendError('Something went wront, please try again.' + JSON.stringify(err));
                                    CodexCLI.createBlogAdmin(blogName, callback);
                                } else {
                                    callback(null, res);
                                }
                            });
                        }
                    });
                } else {
                    // CodexCLI.createConfigFile(blogName, callback); ??
                }
            });
        },

        sendMessage: sendMessage,
        sendSuccess: sendSuccess,
        sendError: sendError
    }

    return CodexCLI;
};