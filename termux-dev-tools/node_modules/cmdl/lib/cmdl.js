var argv = require('argv'),
    exec = require('child_process').exec,
    prompt = require('prompt'),
    cliName = null,
    promptEnabled = false,
    cmdl = {},
    cmds = {},
    opts = {};

function _parseArguments(args) {
    if(args.mod) {
        if(cmds && cmds[args.mod]) {
            cmds[args.mod].call(this, args);
        } else {
            throw 'Invalid command';
        }
    } else if(args.options) {
        for(key in args.options) {
            if(opts && opts[key]) {
                opts[key].call(this, args.options[key]);
            }
        }
    } else {
        throw 'Invalid request';
    }
}

function _setName(name) {
    cliName = name;
    prompt.message = name;
}

function _setVersion(vsn) {
   argv.version(vsn);
}

cmdl.init = function(options) {
    if(options) {
        if(options.version) {
            argv.version = options.version;
        } else {
            throw 'You need to set the version of your CLI.'
        }

        if(options.name) {
            cliName = options.name;
            prompt.message = options.name;
        }

        if(options.enablePrompt) {
            promptEnabled = true;
            prompt.start();
        }
    } else {
        throw 'No options defined - you need to set at least the version of your CLI.'
    }
}

cmdl.listen = function() {
    _parseArguments(argv.run());
};

cmdl.addOption = function(props) {
    argv.option({
        name: props.name,
        short: props.short,
        type: props.type,
        description: props.description,
        example: props.example
    });

    if(!opts[props.name]) {
        opts[props.name] = (props.callback) ? props.callback : false;
    }

    return opts[props.name];
};

cmdl.addCommand = function(props) {
    argv.mod({
        mod: props.name,
        description: props.description,
        options: props.options
    });

    if(!cmds[props.name]) {
        cmds[props.name] = (props.callback) ? props.callback : false;
    }

    return cmds[props.name];
};

cmdl.execute = function(command, callback) {
    exec(command, function(err, stdout, stderr) {
        callback.call(this, err, stdout, stderr);
    });
};

cmdl.prompt = function(schema, callback) {
    if(!promptEnabled) {
        throw 'The prompt option is not enabled for this CLI.';
    } else {
        prompt.get(schema, callback);
    }
};

module.exports = cmdl;
