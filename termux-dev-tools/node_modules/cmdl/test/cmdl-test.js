var mocha = require('mocha'),
    expect = require('expect.js'),
    cmdl = require('../lib/cmdl.js');

describe('lib/cmdl.js', function() {

    describe('The Cmdl Module', function() {
        it('has an init method', function(done) {
            expect(cmdl.init).to.be.a('function');
            done();
        });

        it('has a listen method', function(done) {
            expect(cmdl.listen).to.be.a('function');
            done();
        });

        it('has an addOption method', function(done) {
            expect(cmdl.addOption).to.be.a('function');
            done();
        });

        it('has an addCommand method', function(done) {
            expect(cmdl.addCommand).to.be.a('function');
            done();
        });

        it('has a prompt method', function(done) {
            expect(cmdl.prompt).to.be.a('function');
            done();
        });

        it('has an execute method', function(done) {
            expect(cmdl.execute).to.be.a('function');
            done();
        });
    });


    describe('The init method', function() {
        it('throws an error if you don\'t set any options', function(done) {
            try {
                cmdl.init();
            } catch (e) {
                expect(e).to.equal('No options defined - you need to set at least the version of your CLI.');
                done();
            }
        });

        it('throws an error if you set options but not the cli version', function(done) {
            try {
                cmdl.init({
                    name: 'TestCLI'
                });
            } catch (e) {
                expect(e).to.equal('You need to set the version of your CLI.');
                done();
            }
        });
    });

    describe('The prompt method', function() {
        it('throws an error if you did not enable the prompt option for your CLI', function(done) {
            cmdl.init({version: '0.0.1', name: 'TestCLI'});

            try {
                cmdl.prompt([
                    {name: 'username', resultRequired: true}
                ], function(err, result) {
                    return result;
                });
            } catch(e) {
                expect(e).to.equal('The prompt option is not enabled for this CLI.');
                done();
            }
        });
    });

    describe('The execute method', function() {
        it('can execute a system command', function(done) {
            cmdl.init({version: '0.0.1', name: 'TestCLI'});
            cmdl.execute('pwd', function(err, stdout, stderr) {
                expect(err).to.be(null);
                expect(stdout).to.be.a('string');
                expect(stdout.length).to.be.greaterThan(0);
                expect(stderr.length).to.equal(0);
                done();
            });
        });
    });

    describe('The addOption method', function() {
        it('returns false if you did not specify a callback', function(done) {
            cmdl.init({version: '0.0.1', name: 'TestCLI'});

            var option = cmdl.addOption({
                name: 'test',
                short: 't',
                type: 'string',
                description: 'test value',
                example: 'cmdl-test -t hello world'
            });

            expect(option).to.be(false);
            done();
        });
    });

    describe('The addCommand method', function() {
        it('returns false if you did not specify a callback', function(done) {
            cmdl.init({version: '0.0.1', name: 'TestCLI'});

            var command = cmdl.addCommand({
                name: 'create',
                description: 'create a new blog',
                options: [{
                    name: 'name',
                    short: 'n',
                    type: 'string',
                    description: 'blog name',
                    example: 'cmdl-test create -n testblog'
                }]
            });

            expect(command).to.be(false);
            done();
        });
    });

});