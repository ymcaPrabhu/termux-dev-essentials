#! /usr/bin/env node

var cli = require('../lib/cmdl');

cli.init({
    'name': 'DemoCLI',
    'version': '0.0.1',
    'enablePrompt': true
});

cli.addOption({
    name: 'test',
    short: 't',
    type: 'string',
    description: 'test value',
    example: 'cmdl-test -t hello world',
    callback: function(txt) {
        console.log(txt);
    }
});

cli.addOption({
    name: 'port',
    short: 'p',
    type: 'int',
    description: 'port',
    example: 'cmdl-test -p 8080',
    callback: function(port) {
        console.log("Port is: ", port);
    }
});

cli.addOption({
    name: 'login',
    short: 'l',
    type: 'string',
    description: 'your login credentials',
    example: 'cmdl-test --login',
    callback: function() {
        var schema = [
            {
                description: 'Enter your username',
                name: 'username',
                resultequired: true
            },
            {
                description: 'Enter your password',
                name: 'password',
                hidden: true,
                conform: function (value) {
                    return true;
                }
            }
        ];

        cli.prompt(schema, function (err, result) {
            console.log('cmdl received:');
            console.log('  username: ' + result.username);
            console.log('  password: ' + result.password);
        });
    }
});

cli.addCommand({
    name: 'create',
    description: 'create a new blog',
    options: [{
        name: 'name',
        short: 'n',
        type: 'string',
        description: 'blog name',
        example: 'cmdl-test create -n testblog'
    }],
    callback: function(args) {
        console.log("create method was called: ", args);
        cli.execute('ls -alF', function(err, stdout, stderr) {
            if(err) throw err;
            if(stderr) throw stderr;
            console.log("responsse: ", stdout);
        });
    }
});

cli.listen();