"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/index.ts
var index_exports = {};
__export(index_exports, {
  ContentType: () => ContentType,
  HTTPMethods: () => HTTPMethods,
  ResponseTypes: () => ResponseTypes,
  VetchError: () => VetchError
});
module.exports = __toCommonJS(index_exports);

// lib/enums/HTTPMethods.ts
var HTTPMethods = /* @__PURE__ */ ((HTTPMethods2) => {
  HTTPMethods2["GET"] = "GET";
  HTTPMethods2["POST"] = "POST";
  HTTPMethods2["DELETE"] = "DELETE";
  HTTPMethods2["PUT"] = "PUT";
  HTTPMethods2["PATCH"] = "PATCH";
  return HTTPMethods2;
})(HTTPMethods || {});

// lib/enums/contentType.ts
var ContentType = /* @__PURE__ */ ((ContentType2) => {
  ContentType2["JSON"] = "application/json";
  ContentType2["FORM_URLENCODED"] = "application/x-www-form-urlencoded";
  ContentType2["XML"] = "application/xml";
  ContentType2["CSV"] = "text/csv";
  return ContentType2;
})(ContentType || {});

// lib/enums/responseTypes.ts
var ResponseTypes = /* @__PURE__ */ ((ResponseTypes2) => {
  ResponseTypes2["json"] = "json";
  ResponseTypes2["stream"] = "stream";
  ResponseTypes2["text"] = "text";
  return ResponseTypes2;
})(ResponseTypes || {});

// lib/errors/vetchError.ts
var VetchError = class extends Error {
  code;
  config;
  response;
  /**
   * Creates an instance of VetchError.
   *
   * @param {string} message - The error message.
   * @param {VetchOptions} options - Configuration options for the API request.
   * @param {VetchResponse} response - Configuration options for the API request.
   */
  constructor(message, options, response) {
    super(message);
    this.config = options;
    this.response = response;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ContentType,
  HTTPMethods,
  ResponseTypes,
  VetchError
});
