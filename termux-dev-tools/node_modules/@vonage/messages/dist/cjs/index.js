"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/index.ts
var index_exports = {};
__export(index_exports, {
  AbstractAudioMessage: () => AbstractAudioMessage,
  AbstractFileMessage: () => AbstractFileMessage,
  AbstractImageMessage: () => AbstractImageMessage,
  AbstractMessage: () => AbstractMessage,
  AbstractTextMessage: () => AbstractTextMessage,
  AbstractVcardMessage: () => AbstractVcardMessage,
  AbstractVideoMessage: () => AbstractVideoMessage,
  Channels: () => Channels,
  MMSAudio: () => MMSAudio,
  MMSContent: () => MMSContent,
  MMSFile: () => MMSFile,
  MMSImage: () => MMSImage,
  MMSText: () => MMSText,
  MMSVcard: () => MMSVcard,
  MMSVideo: () => MMSVideo,
  MessageTypes: () => MessageTypes,
  Messages: () => Messages,
  MessengerAudio: () => MessengerAudio,
  MessengerCategory: () => MessengerCategory,
  MessengerFile: () => MessengerFile,
  MessengerImage: () => MessengerImage,
  MessengerTags: () => MessengerTags,
  MessengerText: () => MessengerText,
  MessengerVideo: () => MessengerVideo,
  RCSCustom: () => RCSCustom,
  RCSFile: () => RCSFile,
  RCSImage: () => RCSImage,
  RCSText: () => RCSText,
  RCSVideo: () => RCSVideo,
  SMS: () => SMS,
  UpdateMessageStatus: () => UpdateMessageStatus,
  ViberCategory: () => ViberCategory,
  ViberFile: () => ViberFile,
  ViberImage: () => ViberImage,
  ViberText: () => ViberText,
  ViberVideo: () => ViberVideo,
  WhatsAppAudio: () => WhatsAppAudio,
  WhatsAppCustom: () => WhatsAppCustom,
  WhatsAppFile: () => WhatsAppFile,
  WhatsAppImage: () => WhatsAppImage,
  WhatsAppLanguageCode: () => WhatsAppLanguageCode,
  WhatsAppReaction: () => WhatsAppReaction,
  WhatsAppSticker: () => WhatsAppSticker,
  WhatsAppTemplate: () => WhatsAppTemplate,
  WhatsAppText: () => WhatsAppText,
  WhatsAppVideo: () => WhatsAppVideo
});
module.exports = __toCommonJS(index_exports);

// lib/classes/AbstractMessage.ts
var AbstractMessage = class {
  /**
   * The recipient of the message.
   */
  to;
  /**
   * The sender of the message.
   */
  from;
  /**
   * An optional client reference for the message.
   */
  clientRef;
  /**
   * Specifies the URL to which Status Webhook messages will be sent for this
   * particular message. Over-rides account-level and application-level Status
   * Webhook url settings on a per-message basis.
   */
  webhookUrl;
  /**
   * Specifies which version of the Messages API will be used to send Status
   * Webhook messages for this particular message. For example, if v0.1 is
   * set, then the JSON body of Status Webhook messages for this message will
   * be sent in Messages v0.1 format. Over-rides account-level and
   * application-level API version settings on a per-message basis.
   */
  webhookVersion;
  /**
   * Constructs a new `AbstractMessage` instance.
   *
   * @param {MessageParams} params - The parameters for creating a message.
   */
  constructor(params) {
    this.to = params.to;
    this.from = params.from;
    this.clientRef = params.clientRef;
    this.webhookUrl = params.webhookUrl;
    this.webhookVersion = params.webhookVersion;
  }
};

// lib/enums/MessageTypes.ts
var MessageTypes = /* @__PURE__ */ ((MessageTypes2) => {
  MessageTypes2["TEXT"] = "text";
  MessageTypes2["IMAGE"] = "image";
  MessageTypes2["VCARD"] = "vcard";
  MessageTypes2["AUDIO"] = "audio";
  MessageTypes2["VIDEO"] = "video";
  MessageTypes2["FILE"] = "file";
  MessageTypes2["CONTENT"] = "content";
  MessageTypes2["CUSTOM"] = "custom";
  MessageTypes2["TEMPLATE"] = "template";
  MessageTypes2["STICKER"] = "sticker";
  MessageTypes2["REACTION"] = "reaction";
  return MessageTypes2;
})(MessageTypes || {});

// lib/classes/AbstractAudioMessage.ts
var AbstractAudioMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'audio').
   */
  messageType = "audio" /* AUDIO */;
  audio;
  /**
   * Constructs a new `AbstractAudioMessage` instance.
   *
   * @param {MessageParamsAudio} params - The parameters for creating an audio message.
   */
  constructor(params) {
    super(params);
    this.audio = params.audio;
  }
};

// lib/classes/AbstractFileMessage.ts
var AbstractFileMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'file').
   */
  messageType = "file" /* FILE */;
  file;
  /**
   * Constructs a new `AbstractFileMessage` instance.
   *
   * @param {MessageParamsFile} params - The parameters for creating a file message.
   */
  constructor(params) {
    super(params);
    this.file = params.file;
  }
};

// lib/classes/AbstractImageMessage.ts
var AbstractImageMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'image').
   */
  messageType = "image" /* IMAGE */;
  image;
  /**
   * Constructs a new `AbstractImageMessage` instance.
   *
   * @param {MessageParamsImage} params - The parameters for creating an image message.
   */
  constructor(params) {
    super(params);
    this.image = params.image;
  }
};

// lib/enums/Channels.ts
var Channels = /* @__PURE__ */ ((Channels2) => {
  Channels2["MESSENGER"] = "messenger";
  Channels2["MMS"] = "mms";
  Channels2["SMS"] = "sms";
  Channels2["WHATSAPP"] = "whatsapp";
  Channels2["VIBER"] = "viber_service";
  Channels2["RCS"] = "rcs";
  return Channels2;
})(Channels || {});

// lib/enums/Messenger/MessengerCategory.ts
var MessengerCategory = /* @__PURE__ */ ((MessengerCategory2) => {
  MessengerCategory2["RESPONSE"] = "response";
  MessengerCategory2["UPDATE"] = "update";
  MessengerCategory2["MESSAGE_TAG"] = "message_tag";
  return MessengerCategory2;
})(MessengerCategory || {});

// lib/enums/Messenger/MessengerTags.ts
var MessengerTags = /* @__PURE__ */ ((MessengerTags2) => {
  MessengerTags2["CONFIRMED_EVENT_UPDATE"] = "CONFIRMED_EVENT_UPDATE";
  MessengerTags2["POST_PURCHASE_UPDATE"] = "POST_PURCHASE_UPDATE";
  MessengerTags2["ACCOUNT_UPDATE"] = "ACCOUNT_UPDATE";
  MessengerTags2["HUMAN_AGENT"] = "HUMAN_AGENT";
  MessengerTags2["SHIPPING_UPDATE"] = "SHIPPING_UPDATE";
  MessengerTags2["RESERVATION_UPDATE"] = "RESERVATION_UPDATE";
  MessengerTags2["ISSUE_RESOLUTION"] = "ISSUE_RESOLUTION";
  MessengerTags2["APPOINTMENT_UPDATE"] = "APPOINTMENT_UPDATE";
  MessengerTags2["GAME_EVENT"] = "GAME_EVENT";
  MessengerTags2["TRANSPORTATION_UPDATE"] = "TRANSPORTATION_UPDATE";
  MessengerTags2["FEATURE_FUNCTIONALITY_UPDATE"] = "FEATURE_FUNCTIONALITY_UPDATE";
  MessengerTags2["TICKET_UPDATE"] = "TICKET_UPDATE";
  MessengerTags2["PAYMENT_UPDATE"] = "PAYMENT_UPDATE";
  MessengerTags2["PERSONAL_FINANCE_UPDATE"] = "PERSONAL_FINANCE_UPDATE";
  return MessengerTags2;
})(MessengerTags || {});

// lib/enums/UpdateMessageStatus.ts
var UpdateMessageStatus = /* @__PURE__ */ ((UpdateMessageStatus2) => {
  UpdateMessageStatus2["READ"] = "read";
  UpdateMessageStatus2["REVOKED"] = "revoked";
  return UpdateMessageStatus2;
})(UpdateMessageStatus || {});

// lib/enums/Viber/ViberCategory.ts
var ViberCategory = /* @__PURE__ */ ((ViberCategory2) => {
  ViberCategory2["TRANSACTION"] = "transaction";
  ViberCategory2["PROMOTION"] = "promotion";
  return ViberCategory2;
})(ViberCategory || {});

// lib/enums/WhatsApp/WhatsAppLanguageCodes.ts
var WhatsAppLanguageCode = /* @__PURE__ */ ((WhatsAppLanguageCode2) => {
  WhatsAppLanguageCode2["AFRIKAANS"] = "af";
  WhatsAppLanguageCode2["ALBANIAN"] = "sq";
  WhatsAppLanguageCode2["ARABIC"] = "ar";
  WhatsAppLanguageCode2["AZERBAIJANI"] = "az";
  WhatsAppLanguageCode2["BENGALI"] = "bn";
  WhatsAppLanguageCode2["BULGARIAN"] = "bg";
  WhatsAppLanguageCode2["CATALAN"] = "ca";
  WhatsAppLanguageCode2["CHINESE_CHN"] = "zh_CN";
  WhatsAppLanguageCode2["CHINESE_HKG"] = "zh_HK";
  WhatsAppLanguageCode2["CHINESE_TAI"] = "zh_TW";
  WhatsAppLanguageCode2["CROATIAN"] = "hr";
  WhatsAppLanguageCode2["CZECH"] = "cs";
  WhatsAppLanguageCode2["DANISH"] = "da";
  WhatsAppLanguageCode2["DUTCH"] = "nl";
  WhatsAppLanguageCode2["ENGLISH"] = "en";
  WhatsAppLanguageCode2["ENGLISH_UK"] = "en_GB";
  WhatsAppLanguageCode2["ENGLISH_US"] = "en_US";
  WhatsAppLanguageCode2["ESTONIAN"] = "et";
  WhatsAppLanguageCode2["FILIPINO"] = "fil";
  WhatsAppLanguageCode2["FINNISH"] = "fi";
  WhatsAppLanguageCode2["FRENCH"] = "fr";
  WhatsAppLanguageCode2["GEORGIAN"] = "ka";
  WhatsAppLanguageCode2["GERMAN"] = "de";
  WhatsAppLanguageCode2["GREEK"] = "el";
  WhatsAppLanguageCode2["GUJARATI"] = "gu";
  WhatsAppLanguageCode2["HAUSA"] = "ha";
  WhatsAppLanguageCode2["HEBREW"] = "he";
  WhatsAppLanguageCode2["HINDI"] = "hi";
  WhatsAppLanguageCode2["HUNGARIAN"] = "hu";
  WhatsAppLanguageCode2["INDONESIAN"] = "id";
  WhatsAppLanguageCode2["IRISH"] = "ga";
  WhatsAppLanguageCode2["ITALIAN"] = "it";
  WhatsAppLanguageCode2["JAPANESE"] = "ja";
  WhatsAppLanguageCode2["KANNADA"] = "kn";
  WhatsAppLanguageCode2["KAZAKH"] = "kk";
  WhatsAppLanguageCode2["KINYARWANDA"] = "rw_RW";
  WhatsAppLanguageCode2["KOREAN"] = "ko";
  WhatsAppLanguageCode2["KYRGYZ_KYRGYZSTAN"] = "ky_KG";
  WhatsAppLanguageCode2["LAO"] = "lo";
  WhatsAppLanguageCode2["LATVIAN"] = "lv";
  WhatsAppLanguageCode2["LITHUANIAN"] = "lt";
  WhatsAppLanguageCode2["MACEDONIAN"] = "mk";
  WhatsAppLanguageCode2["MALAY"] = "ms";
  WhatsAppLanguageCode2["MALAYALAM"] = "ml";
  WhatsAppLanguageCode2["MARATHI"] = "mr";
  WhatsAppLanguageCode2["NORWEGIAN"] = "nb";
  WhatsAppLanguageCode2["PERSIAN"] = "fa";
  WhatsAppLanguageCode2["POLISH"] = "pl";
  WhatsAppLanguageCode2["PORTUGUESE_BR"] = "pt_BR";
  WhatsAppLanguageCode2["PORTUGUESE_POR"] = "pt_PT";
  WhatsAppLanguageCode2["PUNJABI"] = "pa";
  WhatsAppLanguageCode2["ROMANIAN"] = "ro";
  WhatsAppLanguageCode2["RUSSIAN"] = "ru";
  WhatsAppLanguageCode2["SERBIAN"] = "sr";
  WhatsAppLanguageCode2["SLOVAK"] = "sk";
  WhatsAppLanguageCode2["SLOVENIAN"] = "sl";
  WhatsAppLanguageCode2["SPANISH"] = "es";
  WhatsAppLanguageCode2["SPANISH_ARG"] = "es_AR";
  WhatsAppLanguageCode2["SPANISH_SPA"] = "es_ES";
  WhatsAppLanguageCode2["SPANISH_MEX"] = "es_MX";
  WhatsAppLanguageCode2["SWAHILI"] = "sw";
  WhatsAppLanguageCode2["SWEDISH"] = "sv";
  WhatsAppLanguageCode2["TAMIL"] = "ta";
  WhatsAppLanguageCode2["TELUGU"] = "te";
  WhatsAppLanguageCode2["THAI"] = "th";
  WhatsAppLanguageCode2["TURKISH"] = "tr";
  WhatsAppLanguageCode2["UKRAINIAN"] = "uk";
  WhatsAppLanguageCode2["URDU"] = "ur";
  WhatsAppLanguageCode2["UZBEK"] = "uz";
  WhatsAppLanguageCode2["VIETNAMESE"] = "vi";
  WhatsAppLanguageCode2["ZULU"] = "zu";
  return WhatsAppLanguageCode2;
})(WhatsAppLanguageCode || {});

// lib/classes/AbstractTextMessage.ts
var AbstractTextMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'text').
   */
  messageType = "text" /* TEXT */;
  /**
   * The text content of the message.
   */
  text;
  /**
   * Constructs a new `AbstractTextMessage` instance for text messages.
   *
   * @param {MessageParamsText} params - The parameters for creating a text message.
   */
  constructor(params) {
    super(params);
    this.text = params.text;
  }
};

// lib/classes/AbstractVcardMessage.ts
var AbstractVcardMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'vcard').
   */
  messageType = "vcard" /* VCARD */;
  /**
   * The vCard (contact card) content of the message.
   */
  vcard;
  /**
   * Constructs a new `AbstractVcardMessage` instance for vCard messages.
   *
   * @param {MessageParamsVcard} params - The parameters for creating a vCard message.
   */
  constructor(params) {
    super(params);
    this.vcard = params.vcard;
  }
};

// lib/classes/AbstractVideoMessage.ts
var AbstractVideoMessage = class extends AbstractMessage {
  /**
   * The type of message, which is 'video' for video messages.
   */
  messageType = "video" /* VIDEO */;
  /**
   * The video content of the message.
   */
  video;
  /**
   * Constructs a new `AbstractVideoMessage` instance for video messages.
   *
   * @param {MessageParamsVideo} params - The parameters for creating a video message.
   */
  constructor(params) {
    super(params);
    this.video = params.video;
  }
};

// lib/classes/MMS/MMSAudio.ts
var MMSAudio = class extends AbstractAudioMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS audio message.
   *
   * @param {MessageParamsAudio} params - The parameters for creating the audio message.
   *
   * @example
   * ```ts
   * import { MMSAudio } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSAudio({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  audio: {
   *    url: 'https://example.com/audio.mp3',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/MMS/MMSContent.ts
var MMSContent = class extends AbstractMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * The type of message (always 'content').
   */
  messageType = "content" /* CONTENT */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  content;
  /**
   * Send an MMS custom message.
   *
   * @param {MessageParamsContent} params - The parameters for creating the custom message.
   * @example
   * ```ts
   * import { MMSContent } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSContent({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  custom: [
   *    {
   *      type: 'image',
   *      url: 'https://example.com/image.jpg',
   *      caption: 'My cool image',
   *    }
   *  ],
   * });
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.content = params.content;
  }
};

// lib/classes/MMS/MMSFile.ts
var MMSFile = class extends AbstractFileMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS file message.
   *
   * @param {MessageParamsFile} params - The parameters for creating the file message.
   * @example
   * ```ts
   * import { MMSFile } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSFile({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  file: {
   *    url: 'https://example.com/file.mp4',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/MMS/MMSImage.ts
var MMSImage = class extends AbstractImageMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS image message.
   *
   * @param {MessageParamsImage} params - The parameters for creating the image message.
   * @example
   * ```ts
   * import { MMSImage } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSImage({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  image: {
   *    url: 'https://example.com/image.jpg',
   *    caption: 'This is an example image',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/MMS/MMSText.ts
var MMSText = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS text message.
   *
   * @param {MessageParamsText} params - The parameters for creating the text message.
   * @example
   * ```ts
   * import { MMSText } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSText({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'my message',
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/MMS/MMSVcard.ts
var MMSVcard = class extends AbstractVcardMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS vCard message.
   *
   * @param {MessageParamsVcard} params - The parameters for creating the vCard message.
   * @example
   * ```ts
   * import { MMSVcard } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSVcard({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  vcard: {
   *    url: 'https://example.com/vcard.vcf',
   *    caption: 'Download my contact information',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/MMS/MMSVideo.ts
var MMSVideo = class extends AbstractVideoMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS video message.
   *
   * @param {MessageParamsVideo} params - The parameters for creating the video message.
   * @example
   * ```ts
   * import { MMSVideo } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSVideo({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  video: {
   *    url: 'https://example.com/video.mp4',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/Messenger/MessengerAudio.ts
var MessengerAudio = class extends AbstractAudioMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * The messenger information for this message.
   */
  messenger;
  /**
   * Sends an audio message to the Facebook Messenger channel.
   *
   * @param {MessengerAudioParams} params - The parameters for creating a Messenger audio message.
   * @example
   * ```ts
   * import { MessengerAudio } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessengerAudio({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  audio: {
   *    url: 'https://example.com/audio.mp3',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};

// lib/classes/Messenger/MessengerFile.ts
var MessengerFile = class extends AbstractFileMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * The type of message (always 'file').
   */
  messageType = "file" /* FILE */;
  /**
   * The messenger information for this message.
   */
  messenger;
  /**
   * Sends a file message to the Facebook Messenger channel.
   *
   * @param {MessengerFileParams} params - The parameters for creating a Messenger file message.
   *
   * @example
   * ```ts
   * import { MessengerFile } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessengerFile({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  file: {
   *    url: 'https://example.com/image.jpg',
   *    caption: 'This is an image',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};

// lib/classes/Messenger/MessengerImage.ts
var MessengerImage = class extends AbstractImageMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * Additional Messenger-specific parameters for the image message.
   */
  messenger;
  /**
   * Send an image message using the Facebook Messenger channel.
   *
   * @param {MessengerImageParams} params - The parameters for the image message.
   * @example
   * ```ts
   * import { MessengerImage } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessengerImage({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  image: {
   *    url: 'https://example.com/image.jpg',
   *    caption: 'This is an image',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};

// lib/classes/Messenger/MessengerText.ts
var MessengerText = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * The messenger information for this message.
   */
  messenger;
  /**
   * Sends a text message to the Facebook Messenger channel.
   *
   * @param {MessengerTextParams} params - The parameters for creating a Messenger text message.
   *
   * @example
   * ```ts
   * import { MessengerText } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessengerText({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};

// lib/classes/Messenger/MessengerVideo.ts
var MessengerVideo = class extends AbstractVideoMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * The messenger information for this message.
   */
  messenger;
  /**
   * Send a video message using the Facebook Messenger channel.
   *
   * @param {MessengerVideoParams} params - The parameters for creating a Messenger video message.
   * @example
   * ```ts
   * import { MessagengerVideo } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessagengerVideo({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  video: {
   *    url: 'https://example.com/video.mp4',
   *    caption: 'This is a video',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};

// lib/classes/SMS/SMS.ts
var import_debug = __toESM(require("debug"));
var log = (0, import_debug.default)("vonage:messages:sms");
var SMS = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'sms').
   */
  channel = "sms" /* SMS */;
  sms;
  /**
   * The duration in seconds the delivery of an SMS will be attempted. By
   * default Vonage attempts delivery for 72 hours, however the maximum
   * effective value depends on the operator and is typically 24 - 48 hours. We
   * recommend this value should be kept at its default or at least 30 minutes.
   */
  ttl;
  /**
   * Send an SMS message
   *
   * @param {MessageParamsText | string} params - The message parameters or text message.
   * @param {string} to - The recipient's phone number.
   * @param {string} from - The sender's phone number.
   * @param {string} clientRef - The client reference for the message.
   *
   * @example
   * ```ts
   * import { SMS } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new SMS({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   *
   * @example
   * Send SMS with entity ID and content ID
   * ```ts
   * import { SMS } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new SMS({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  clientRef: 'my-personal-reference',
   *  sms: {
   *    entityId: 'MyEntityID',
   *    contentId: 'MyContentID'
   *  }
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params, to, from, clientRef) {
    if (to) {
      log("Please update the call to pass in an object instead of parameters");
      params = {
        text: params,
        to,
        from,
        clientRef
      };
    }
    super(params);
    if (typeof params === "string") {
      return;
    }
    this.ttl = params.ttl;
    this.sms = params.sms ? {
      encodingType: params.sms?.encodingType,
      contentId: params.sms?.contentId,
      entityId: params.sms?.entityId
    } : void 0;
  }
};

// lib/classes/Viber/ViberFile.ts
var ViberFile = class extends AbstractFileMessage {
  /**
   * The channel for this message (always 'viber_service').
   */
  channel = "viber_service" /* VIBER */;
  /**
   * Send a file message using the Viber Service channel.
   *
   * @param {ViberFileParams} params - The parameters for the ViberFile message.
   * @example
   * ```ts
   * import { ViberFile } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new ViberFile({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  file: {
   *    url: 'https://my-host.com/my-file.pdf',
   *  },
   *  viberService: {
   *    action: {
   *      url: 'https://my-host.com/my-path',
   *      text: 'My button text',
   *    },
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/Viber/ViberImage.ts
var ViberImage = class extends AbstractImageMessage {
  /**
   * The channel for this message (always 'viber_service').
   */
  channel = "viber_service" /* VIBER */;
  viberService;
  /**
   * Send an image message using the Viber Service channel.
   *
   * @param {ViberImageParams} params - The parameters for the ViberImage message.
   * @example
   * ```ts
   * import { ViberImage } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new ViberImage({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  image: {
   *  url: 'https://my-host.com/my-image.jpg',
   *  },
   *  viberService: {
   *    action: {
   *      url: 'https://my-host.com/my-path',
   *      text: 'My button text',
   *    },
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.viberService = params.viberService;
  }
};

// lib/classes/Viber/ViberText.ts
var ViberText = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'viber_service').
   */
  channel = "viber_service" /* VIBER */;
  viberService;
  /**
   * Send a text message using the Viber Service channel.
   *
   * @param {ViberTextParams} params - The parameters for the ViberText message.
   *
   * @example
   * ```ts
   * import { ViberText } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new ViberText({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  viberService: {
   *    action: {
   *      url: 'https://my-host.com/my-path',
   *      text: 'My button text',
   *    },
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.viberService = params.viberService;
  }
};

// lib/classes/Viber/ViberVideo.ts
var ViberVideo = class extends AbstractVideoMessage {
  /**
   * The channel for this message (always 'viber_service').
   */
  channel = "viber_service" /* VIBER */;
  viberService;
  /**
   * Send a video message using the Viber Service channel.
   *
   * @param {ViberVideoParams} params - The parameters for the ViberVideo message.
   * @example
   * ```ts
   * import { ViberVideo } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new ViberVideo({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  video: {
   *    url: 'https://my-host.com/my-video.mp4',
   *  },
   *  viberService: {
   *    action: {
   *      url: 'https://my-host.com/my-path',
   *      text: 'My button text',
   *    },
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.viberService = params.viberService;
  }
};

// lib/classes/WhatsApp/WhatsAppAudio.ts
var WhatsAppAudio = class extends AbstractAudioMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Sends an audio message to a WhatsApp user.
   *
   * @param {WhatsAppAudioParams} params - The parameters for creating a WhatsApp audio message.
   * @example
   * ```ts
   * import { WhatsAppAudio } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppAudio({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  audio: {
   *    url: 'https://example.com/audio.mp3',
   *    caption: 'This is an audio message',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppCustom.ts
var WhatsAppCustom = class extends AbstractMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  /**
   * The type of message (always 'custom').
   */
  messageType = "custom" /* CUSTOM */;
  custom;
  context;
  /**
   * Sends a custom message to a WhatsApp user.
   *
   * @param {WhatsAppCustomParams} params - The parameters for creating a WhatsApp custom message.
   * @example
   * ```ts
   * import { WhatsAppCustom } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppCustom({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  custom: {
   *    type: 'template',
   *    template: {
   *      namespace: 'your-namespace',
   *      name: 'your-template-name',
   *    },
   *  }
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.custom = params.custom;
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppFile.ts
var WhatsAppFile = class extends AbstractFileMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Send a WhatsApp file message.
   *
   * @param {WhatsAppFileParams} params - The parameters for creating a WhatsApp file message.
   * @example
   * ```ts
   * import { WhatsAppFile } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppFile({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  file: {
   *    url: 'https://example.com/image.jpg',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppImage.ts
var WhatsAppImage = class extends AbstractImageMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Sends an image message to a WhatsApp user.
   *
   * @param {WhatsAppImageParams} params - The parameters for creating a WhatsApp image message.
   * @example
   * ```ts
   * import { WhatsAppImage } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppImage({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  image: {
   *    url: 'https://example.com/image.jpg',
   *    caption: 'This is an image message',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppSticker.ts
var WhatsAppSticker = class extends AbstractMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  /**
   * The type of message (always 'sticker').
   */
  messageType = "sticker" /* STICKER */;
  sticker;
  context;
  /**
   * Send a sticker message to a WhatsApp user.
   *
   * @param {WhatsAppStickerParams} params - The parameters for creating a WhatsApp sticker message.
   * @example
   * Send a sticker message with a sticker ID:
   * ```ts
   * import { WhatsAppSticker } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppSticker({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  sticker: {
   *    id: '0-0',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   *
   * @example
   * Send a sticker message with a sticker URL:
   * ```ts
   * import { WhatsAppSticker } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppSticker({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  sticker: {
   *    url: 'https://example.com/sticker.png',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.sticker = params.sticker;
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppTemplate.ts
var WhatsAppTemplate = class extends AbstractMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  /**
   * The type of message (always 'template').
   */
  messageType = "template" /* TEMPLATE */;
  whatsapp;
  template;
  context;
  /**
   * Send a template message to a WhatsApp user.
   *
   * @param {WhatsAppTemplateParams} params - The parameters for creating a WhatsApp template message.
   *
   * @example
   * ```ts
   * import { WhatsAppTemplate, WhatsAppLanguageCode } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppTemplate({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  whatsapp: {
   *    policy: 'deterministic',
   *    locale: WhatsAppLanguageCode.EN,
   *  },
   *  template: {
   *    name: 'your-template-name',
   *    parameters: [
   *      'foo',
   *      'bar',
   *    ],
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.whatsapp = params.whatsapp;
    this.template = params.template;
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppText.ts
var WhatsAppText = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Send a WhatsApp text message.
   *
   * @param {WhatsAppTextParams} params - The parameters for creating a WhatsApp text message.
   * @example
   * ```ts
   * import { WhatsAppText } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppText({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppVideo.ts
var WhatsAppVideo = class extends AbstractVideoMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Sends a video message to a WhatsApp user.
   *
   * @param {WhatsAppVideoParams} params - The parameters for creating a WhatsApp video message.
   *
   * @example
   * ```ts
   * import { WhatsAppVideo } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppVideo({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  video: {
   *    url: 'https://example.com/video.mp4',
   *    caption: 'This is a video message',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppReaction.ts
var WhatsAppReaction = class extends AbstractMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  /**
   * The type of message (always 'reaction').
   */
  messageType = "reaction" /* REACTION */;
  /**
   * The reaction to send
   */
  reaction;
  /**
   * The WhatsApp Context
   */
  context;
  /**
   * Sends a reaction message to a WhatsApp user.
   *
   * @param {WhatsAppReactionParams} params - The parameters for creating a WhatsApp reaction message.
   * @example
   * Send a reaction
   * ```ts
   * import { WhatsAppReaction } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppReaction({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  reaction: {
   *    action: 'react',
   *    emoji: '😍',
   *  }
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   *
   * @example
   * Remove reaction
   * ```ts
   * import { WhatsAppReaction } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppReaction({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  reaction: {
   *    action: 'unreact',
   *  }
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.reaction = params.reaction;
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/RCS/RCSCustom.ts
var RCSCustom = class extends AbstractMessage {
  /**
   * The channel for this message (always 'rcs').
   */
  channel = "rcs" /* RCS */;
  /**
   * The type of message (always 'custom').
   */
  messageType = "custom" /* CUSTOM */;
  /**
   * A custom payload. The schema of a custom object can vary widely.
   */
  custom;
  /**
   * The duration in seconds the delivery of a message will be attempted. By
   * default Vonage attempts delivery for 72 hours, however the maximum effective
   * value depends on the operator and is typically 24 - 48 hours. We recommend
   * this value should be kept at its default or at least 30 minutes.
   */
  ttl;
  /**
   * Sends a custom message through RCS
   *
   * @param {RCSCustomParams} params - The parameters for creating a RCS custom message.
   * @example
   * ```ts
   * import { RCSCustom } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new RCSCustom({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  custom: {
   *    foo: 'bar',
   *  }
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.custom = params.custom;
    this.ttl = params.ttl;
  }
};

// lib/classes/RCS/RCSFile.ts
var RCSFile = class extends AbstractFileMessage {
  /**
   * The channel for this message (always 'rcs').
   */
  channel = "rcs" /* RCS */;
  /**
   * The duration in seconds the delivery of a message will be attempted. By
   * default Vonage attempts delivery for 72 hours, however the maximum effective
   * value depends on the operator and is typically 24 - 48 hours. We recommend
   * this value should be kept at its default or at least 30 minutes.
   */
  ttl;
  /**
   * Sends a file message to the RCS channel.
   *
   * @param {RCSFileParams} params - The parameters for creating a RCS file message.
   *
   * @example
   * ```ts
   * import { RCSFile } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new RCSFile({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  file: {
   *    url: 'https://example.com/image.pdf',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.ttl = params.ttl;
  }
};

// lib/classes/RCS/RCSImage.ts
var RCSImage = class extends AbstractImageMessage {
  /**
   * The channel for this message (always 'rcs').
   */
  channel = "rcs" /* RCS */;
  /**
   * The duration in seconds the delivery of a message will be attempted. By
   * default Vonage attempts delivery for 72 hours, however the maximum effective
   * value depends on the operator and is typically 24 - 48 hours. We recommend
   * this value should be kept at its default or at least 30 minutes.
   */
  ttl;
  /**
   * Send an RCS image message.
   *
   * @param {RCSImageParams} params - The parameters for creating the image message.
   * @example
   * ```ts
   * import { RCSImage } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new RCSImage({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  image: {
   *    url: 'https://example.com/image.jpg',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.ttl = params.ttl;
  }
};

// lib/classes/RCS/RCSText.ts
var RCSText = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'rcs').
   */
  channel = "rcs" /* RCS */;
  /**
   * The duration in seconds the delivery of a message will be attempted. By
   * default Vonage attempts delivery for 72 hours, however the maximum effective
   * value depends on the operator and is typically 24 - 48 hours. We recommend
   * this value should be kept at its default or at least 30 minutes.
   */
  ttl;
  /**
   * Sends a text message through the RCS channel.
   *
   * @param {RCSTextParams} params - The parameters for creating a RCS text message.
   *
   * @example
   * ```ts
   * import { RCSText } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new RCSText({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.ttl = params.ttl;
  }
};

// lib/classes/RCS/RCSVideo.ts
var RCSVideo = class extends AbstractVideoMessage {
  /**
   * The channel for this message (always 'rcs').
   */
  channel = "rcs" /* RCS */;
  /**
   * The duration in seconds the delivery of a message will be attempted. By
   * default Vonage attempts delivery for 72 hours, however the maximum effective
   * value depends on the operator and is typically 24 - 48 hours. We recommend
   * this value should be kept at its default or at least 30 minutes.
   */
  ttl;
  /**
   * Send an RCS video message.
   *
   * @param {RCSVideoParams} params - The parameters for creating the video message.
   *
   * @example
   * ```ts
   * import { RCSVideo } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new RCSVideo({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  audio: {
   *    url: 'https://example.com/video.mp4',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.ttl = params?.ttl;
  }
};

// lib/messages.ts
var import_server_client = require("@vonage/server-client");
var import_debug2 = __toESM(require("debug"));
var log2 = (0, import_debug2.default)("vonage:messages");
var Messages = class extends import_server_client.Client {
  /**
   * Adds authentication details to the given request based on the configured
   * authentication type. Handle various ways the Messages API handles auth
   * The Messages API handles both JWT (preferred) as well as Basic so we
   * cannot just set a local authType
   *
   * @param {VetchOptions} request - The request to which authentication should be added.
   * @return {Promise<VetchOptions>} A promise that resolves to the request with added authentication.
   */
  async addAuthenticationToRequest(request) {
    log2("Auth config", this.auth);
    this.authType = import_server_client.AuthenticationType.BASIC;
    if (this.auth.applicationId && this.auth.privateKey) {
      log2("Adding JWT token to request");
      this.authType = import_server_client.AuthenticationType.JWT;
    }
    if (this.auth.signature) {
      log2("Signing the request");
      this.authType = import_server_client.AuthenticationType.SIGNATURE;
    }
    return super.addAuthenticationToRequest(request);
  }
  /**
   * Sends a message using the Vonage API.
   *
   * @param {SendMessageParams} message - The message to be sent.
   * @return {Promise<MessageSuccess>} A promise that resolves to a success response with a message UUID.
   */
  async send(message) {
    const data = import_server_client.Client.transformers.snakeCaseObjectKeys(message, true);
    if ("custom" in message) {
      data.custom = message.custom;
    }
    const resp = await this.sendPostRequest(
      `${this.config.apiHost}/v1/messages`,
      data
    );
    return {
      messageUUID: resp.data.message_uuid
    };
  }
  /**
   * Update the status of outbound and/or inbound messages for certain
   * channels. For example, you can revoke outbound messages or mark inbound
   * messages as read.
   *
   * Please not that this endpoint is region specifc. You will need to set the
   * region when you create the client.
   *
   * @example
   * Update the status of a WhatsApp message to "read"
   * ```ts
   * const vonage = new Vonage(
   *   {
   *     applicationId: myAppId,
   *     privateKey: myPrivateKey
   *   },
   *   {
   *     apiHost: 'https://api-eu.vonage.com'
   *   }
   * )
   *
   * await vonage.messages.updateMessage(messageId, UpdateMessageStatus.READ);
   * ```
   *
   * @param {string} messageId - The ID of the message to update.
   * @param {UpdateMessageStatus | string} status - The status to update the message to.
   *
   * @return {Promise<true>} A promise that resolves to true if the message was
   * updated successfully.
   */
  async updateMessage(messageId, status) {
    await this.sendPatchRequest(
      `${this.config.apiHost}/v1/messages/${messageId}`,
      { status }
    );
    return true;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AbstractAudioMessage,
  AbstractFileMessage,
  AbstractImageMessage,
  AbstractMessage,
  AbstractTextMessage,
  AbstractVcardMessage,
  AbstractVideoMessage,
  Channels,
  MMSAudio,
  MMSContent,
  MMSFile,
  MMSImage,
  MMSText,
  MMSVcard,
  MMSVideo,
  MessageTypes,
  Messages,
  MessengerAudio,
  MessengerCategory,
  MessengerFile,
  MessengerImage,
  MessengerTags,
  MessengerText,
  MessengerVideo,
  RCSCustom,
  RCSFile,
  RCSImage,
  RCSText,
  RCSVideo,
  SMS,
  UpdateMessageStatus,
  ViberCategory,
  ViberFile,
  ViberImage,
  ViberText,
  ViberVideo,
  WhatsAppAudio,
  WhatsAppCustom,
  WhatsAppFile,
  WhatsAppImage,
  WhatsAppLanguageCode,
  WhatsAppReaction,
  WhatsAppSticker,
  WhatsAppTemplate,
  WhatsAppText,
  WhatsAppVideo
});
