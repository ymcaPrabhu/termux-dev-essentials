"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/messages.ts
var messages_exports = {};
__export(messages_exports, {
  Messages: () => Messages
});
module.exports = __toCommonJS(messages_exports);
var import_server_client = require("@vonage/server-client");
var import_debug = __toESM(require("debug"));
var log = (0, import_debug.default)("vonage:messages");
var Messages = class extends import_server_client.Client {
  /**
   * Adds authentication details to the given request based on the configured
   * authentication type. Handle various ways the Messages API handles auth
   * The Messages API handles both JWT (preferred) as well as Basic so we
   * cannot just set a local authType
   *
   * @param {VetchOptions} request - The request to which authentication should be added.
   * @return {Promise<VetchOptions>} A promise that resolves to the request with added authentication.
   */
  async addAuthenticationToRequest(request) {
    log("Auth config", this.auth);
    this.authType = import_server_client.AuthenticationType.BASIC;
    if (this.auth.applicationId && this.auth.privateKey) {
      log("Adding JWT token to request");
      this.authType = import_server_client.AuthenticationType.JWT;
    }
    if (this.auth.signature) {
      log("Signing the request");
      this.authType = import_server_client.AuthenticationType.SIGNATURE;
    }
    return super.addAuthenticationToRequest(request);
  }
  /**
   * Sends a message using the Vonage API.
   *
   * @param {SendMessageParams} message - The message to be sent.
   * @return {Promise<MessageSuccess>} A promise that resolves to a success response with a message UUID.
   */
  async send(message) {
    const data = import_server_client.Client.transformers.snakeCaseObjectKeys(message, true);
    if ("custom" in message) {
      data.custom = message.custom;
    }
    const resp = await this.sendPostRequest(
      `${this.config.apiHost}/v1/messages`,
      data
    );
    return {
      messageUUID: resp.data.message_uuid
    };
  }
  /**
   * Update the status of outbound and/or inbound messages for certain
   * channels. For example, you can revoke outbound messages or mark inbound
   * messages as read.
   *
   * Please not that this endpoint is region specifc. You will need to set the
   * region when you create the client.
   *
   * @example
   * Update the status of a WhatsApp message to "read"
   * ```ts
   * const vonage = new Vonage(
   *   {
   *     applicationId: myAppId,
   *     privateKey: myPrivateKey
   *   },
   *   {
   *     apiHost: 'https://api-eu.vonage.com'
   *   }
   * )
   *
   * await vonage.messages.updateMessage(messageId, UpdateMessageStatus.READ);
   * ```
   *
   * @param {string} messageId - The ID of the message to update.
   * @param {UpdateMessageStatus | string} status - The status to update the message to.
   *
   * @return {Promise<true>} A promise that resolves to true if the message was
   * updated successfully.
   */
  async updateMessage(messageId, status) {
    await this.sendPatchRequest(
      `${this.config.apiHost}/v1/messages/${messageId}`,
      { status }
    );
    return true;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Messages
});
