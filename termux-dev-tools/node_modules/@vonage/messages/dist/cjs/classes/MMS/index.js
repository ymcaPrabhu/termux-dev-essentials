"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/classes/MMS/index.ts
var MMS_exports = {};
__export(MMS_exports, {
  MMSAudio: () => MMSAudio,
  MMSContent: () => MMSContent,
  MMSFile: () => MMSFile,
  MMSImage: () => MMSImage,
  MMSText: () => MMSText,
  MMSVcard: () => MMSVcard,
  MMSVideo: () => MMSVideo
});
module.exports = __toCommonJS(MMS_exports);

// lib/classes/AbstractMessage.ts
var AbstractMessage = class {
  /**
   * The recipient of the message.
   */
  to;
  /**
   * The sender of the message.
   */
  from;
  /**
   * An optional client reference for the message.
   */
  clientRef;
  /**
   * Specifies the URL to which Status Webhook messages will be sent for this
   * particular message. Over-rides account-level and application-level Status
   * Webhook url settings on a per-message basis.
   */
  webhookUrl;
  /**
   * Specifies which version of the Messages API will be used to send Status
   * Webhook messages for this particular message. For example, if v0.1 is
   * set, then the JSON body of Status Webhook messages for this message will
   * be sent in Messages v0.1 format. Over-rides account-level and
   * application-level API version settings on a per-message basis.
   */
  webhookVersion;
  /**
   * Constructs a new `AbstractMessage` instance.
   *
   * @param {MessageParams} params - The parameters for creating a message.
   */
  constructor(params) {
    this.to = params.to;
    this.from = params.from;
    this.clientRef = params.clientRef;
    this.webhookUrl = params.webhookUrl;
    this.webhookVersion = params.webhookVersion;
  }
};

// lib/classes/AbstractAudioMessage.ts
var AbstractAudioMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'audio').
   */
  messageType = "audio" /* AUDIO */;
  audio;
  /**
   * Constructs a new `AbstractAudioMessage` instance.
   *
   * @param {MessageParamsAudio} params - The parameters for creating an audio message.
   */
  constructor(params) {
    super(params);
    this.audio = params.audio;
  }
};

// lib/classes/MMS/MMSAudio.ts
var MMSAudio = class extends AbstractAudioMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS audio message.
   *
   * @param {MessageParamsAudio} params - The parameters for creating the audio message.
   *
   * @example
   * ```ts
   * import { MMSAudio } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSAudio({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  audio: {
   *    url: 'https://example.com/audio.mp3',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/MMS/MMSContent.ts
var MMSContent = class extends AbstractMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * The type of message (always 'content').
   */
  messageType = "content" /* CONTENT */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  content;
  /**
   * Send an MMS custom message.
   *
   * @param {MessageParamsContent} params - The parameters for creating the custom message.
   * @example
   * ```ts
   * import { MMSContent } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSContent({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  custom: [
   *    {
   *      type: 'image',
   *      url: 'https://example.com/image.jpg',
   *      caption: 'My cool image',
   *    }
   *  ],
   * });
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.content = params.content;
  }
};

// lib/classes/AbstractFileMessage.ts
var AbstractFileMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'file').
   */
  messageType = "file" /* FILE */;
  file;
  /**
   * Constructs a new `AbstractFileMessage` instance.
   *
   * @param {MessageParamsFile} params - The parameters for creating a file message.
   */
  constructor(params) {
    super(params);
    this.file = params.file;
  }
};

// lib/classes/MMS/MMSFile.ts
var MMSFile = class extends AbstractFileMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS file message.
   *
   * @param {MessageParamsFile} params - The parameters for creating the file message.
   * @example
   * ```ts
   * import { MMSFile } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSFile({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  file: {
   *    url: 'https://example.com/file.mp4',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/AbstractImageMessage.ts
var AbstractImageMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'image').
   */
  messageType = "image" /* IMAGE */;
  image;
  /**
   * Constructs a new `AbstractImageMessage` instance.
   *
   * @param {MessageParamsImage} params - The parameters for creating an image message.
   */
  constructor(params) {
    super(params);
    this.image = params.image;
  }
};

// lib/classes/MMS/MMSImage.ts
var MMSImage = class extends AbstractImageMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS image message.
   *
   * @param {MessageParamsImage} params - The parameters for creating the image message.
   * @example
   * ```ts
   * import { MMSImage } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSImage({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  image: {
   *    url: 'https://example.com/image.jpg',
   *    caption: 'This is an example image',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/AbstractTextMessage.ts
var AbstractTextMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'text').
   */
  messageType = "text" /* TEXT */;
  /**
   * The text content of the message.
   */
  text;
  /**
   * Constructs a new `AbstractTextMessage` instance for text messages.
   *
   * @param {MessageParamsText} params - The parameters for creating a text message.
   */
  constructor(params) {
    super(params);
    this.text = params.text;
  }
};

// lib/classes/MMS/MMSText.ts
var MMSText = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS text message.
   *
   * @param {MessageParamsText} params - The parameters for creating the text message.
   * @example
   * ```ts
   * import { MMSText } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSText({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'my message',
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/AbstractVcardMessage.ts
var AbstractVcardMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'vcard').
   */
  messageType = "vcard" /* VCARD */;
  /**
   * The vCard (contact card) content of the message.
   */
  vcard;
  /**
   * Constructs a new `AbstractVcardMessage` instance for vCard messages.
   *
   * @param {MessageParamsVcard} params - The parameters for creating a vCard message.
   */
  constructor(params) {
    super(params);
    this.vcard = params.vcard;
  }
};

// lib/classes/MMS/MMSVcard.ts
var MMSVcard = class extends AbstractVcardMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS vCard message.
   *
   * @param {MessageParamsVcard} params - The parameters for creating the vCard message.
   * @example
   * ```ts
   * import { MMSVcard } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSVcard({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  vcard: {
   *    url: 'https://example.com/vcard.vcf',
   *    caption: 'Download my contact information',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};

// lib/classes/AbstractVideoMessage.ts
var AbstractVideoMessage = class extends AbstractMessage {
  /**
   * The type of message, which is 'video' for video messages.
   */
  messageType = "video" /* VIDEO */;
  /**
   * The video content of the message.
   */
  video;
  /**
   * Constructs a new `AbstractVideoMessage` instance for video messages.
   *
   * @param {MessageParamsVideo} params - The parameters for creating a video message.
   */
  constructor(params) {
    super(params);
    this.video = params.video;
  }
};

// lib/classes/MMS/MMSVideo.ts
var MMSVideo = class extends AbstractVideoMessage {
  /**
   * The channel for this message (always 'mms').
   */
  channel = "mms" /* MMS */;
  /**
   * Time-To-Live (how long a message should exist before it is delivered
   * successfully) in seconds. If a message is not delivered successfully within
   * the TTL time, the message is considered expired and will be rejected if TTL
   * is supported.
   */
  ttl;
  /**
   * Send an MMS video message.
   *
   * @param {MessageParamsVideo} params - The parameters for creating the video message.
   * @example
   * ```ts
   * import { MMSVideo } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MMSVideo({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  video: {
   *    url: 'https://example.com/video.mp4',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MMSAudio,
  MMSContent,
  MMSFile,
  MMSImage,
  MMSText,
  MMSVcard,
  MMSVideo
});
