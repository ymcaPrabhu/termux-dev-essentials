"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/classes/Messenger/index.ts
var Messenger_exports = {};
__export(Messenger_exports, {
  MessengerAudio: () => MessengerAudio,
  MessengerFile: () => MessengerFile,
  MessengerImage: () => MessengerImage,
  MessengerText: () => MessengerText,
  MessengerVideo: () => MessengerVideo
});
module.exports = __toCommonJS(Messenger_exports);

// lib/classes/AbstractMessage.ts
var AbstractMessage = class {
  /**
   * The recipient of the message.
   */
  to;
  /**
   * The sender of the message.
   */
  from;
  /**
   * An optional client reference for the message.
   */
  clientRef;
  /**
   * Specifies the URL to which Status Webhook messages will be sent for this
   * particular message. Over-rides account-level and application-level Status
   * Webhook url settings on a per-message basis.
   */
  webhookUrl;
  /**
   * Specifies which version of the Messages API will be used to send Status
   * Webhook messages for this particular message. For example, if v0.1 is
   * set, then the JSON body of Status Webhook messages for this message will
   * be sent in Messages v0.1 format. Over-rides account-level and
   * application-level API version settings on a per-message basis.
   */
  webhookVersion;
  /**
   * Constructs a new `AbstractMessage` instance.
   *
   * @param {MessageParams} params - The parameters for creating a message.
   */
  constructor(params) {
    this.to = params.to;
    this.from = params.from;
    this.clientRef = params.clientRef;
    this.webhookUrl = params.webhookUrl;
    this.webhookVersion = params.webhookVersion;
  }
};

// lib/classes/AbstractAudioMessage.ts
var AbstractAudioMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'audio').
   */
  messageType = "audio" /* AUDIO */;
  audio;
  /**
   * Constructs a new `AbstractAudioMessage` instance.
   *
   * @param {MessageParamsAudio} params - The parameters for creating an audio message.
   */
  constructor(params) {
    super(params);
    this.audio = params.audio;
  }
};

// lib/classes/Messenger/MessengerAudio.ts
var MessengerAudio = class extends AbstractAudioMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * The messenger information for this message.
   */
  messenger;
  /**
   * Sends an audio message to the Facebook Messenger channel.
   *
   * @param {MessengerAudioParams} params - The parameters for creating a Messenger audio message.
   * @example
   * ```ts
   * import { MessengerAudio } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessengerAudio({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  audio: {
   *    url: 'https://example.com/audio.mp3',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};

// lib/classes/AbstractFileMessage.ts
var AbstractFileMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'file').
   */
  messageType = "file" /* FILE */;
  file;
  /**
   * Constructs a new `AbstractFileMessage` instance.
   *
   * @param {MessageParamsFile} params - The parameters for creating a file message.
   */
  constructor(params) {
    super(params);
    this.file = params.file;
  }
};

// lib/classes/Messenger/MessengerFile.ts
var MessengerFile = class extends AbstractFileMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * The type of message (always 'file').
   */
  messageType = "file" /* FILE */;
  /**
   * The messenger information for this message.
   */
  messenger;
  /**
   * Sends a file message to the Facebook Messenger channel.
   *
   * @param {MessengerFileParams} params - The parameters for creating a Messenger file message.
   *
   * @example
   * ```ts
   * import { MessengerFile } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessengerFile({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  file: {
   *    url: 'https://example.com/image.jpg',
   *    caption: 'This is an image',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};

// lib/classes/AbstractImageMessage.ts
var AbstractImageMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'image').
   */
  messageType = "image" /* IMAGE */;
  image;
  /**
   * Constructs a new `AbstractImageMessage` instance.
   *
   * @param {MessageParamsImage} params - The parameters for creating an image message.
   */
  constructor(params) {
    super(params);
    this.image = params.image;
  }
};

// lib/classes/Messenger/MessengerImage.ts
var MessengerImage = class extends AbstractImageMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * Additional Messenger-specific parameters for the image message.
   */
  messenger;
  /**
   * Send an image message using the Facebook Messenger channel.
   *
   * @param {MessengerImageParams} params - The parameters for the image message.
   * @example
   * ```ts
   * import { MessengerImage } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessengerImage({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  image: {
   *    url: 'https://example.com/image.jpg',
   *    caption: 'This is an image',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};

// lib/classes/AbstractTextMessage.ts
var AbstractTextMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'text').
   */
  messageType = "text" /* TEXT */;
  /**
   * The text content of the message.
   */
  text;
  /**
   * Constructs a new `AbstractTextMessage` instance for text messages.
   *
   * @param {MessageParamsText} params - The parameters for creating a text message.
   */
  constructor(params) {
    super(params);
    this.text = params.text;
  }
};

// lib/classes/Messenger/MessengerText.ts
var MessengerText = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * The messenger information for this message.
   */
  messenger;
  /**
   * Sends a text message to the Facebook Messenger channel.
   *
   * @param {MessengerTextParams} params - The parameters for creating a Messenger text message.
   *
   * @example
   * ```ts
   * import { MessengerText } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessengerText({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};

// lib/classes/AbstractVideoMessage.ts
var AbstractVideoMessage = class extends AbstractMessage {
  /**
   * The type of message, which is 'video' for video messages.
   */
  messageType = "video" /* VIDEO */;
  /**
   * The video content of the message.
   */
  video;
  /**
   * Constructs a new `AbstractVideoMessage` instance for video messages.
   *
   * @param {MessageParamsVideo} params - The parameters for creating a video message.
   */
  constructor(params) {
    super(params);
    this.video = params.video;
  }
};

// lib/classes/Messenger/MessengerVideo.ts
var MessengerVideo = class extends AbstractVideoMessage {
  /**
   * The channel for this message (always 'messenger').
   */
  channel = "messenger" /* MESSENGER */;
  /**
   * The messenger information for this message.
   */
  messenger;
  /**
   * Send a video message using the Facebook Messenger channel.
   *
   * @param {MessengerVideoParams} params - The parameters for creating a Messenger video message.
   * @example
   * ```ts
   * import { MessagengerVideo } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new MessagengerVideo({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  video: {
   *    url: 'https://example.com/video.mp4',
   *    caption: 'This is a video',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.messenger = params.messenger;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  MessengerAudio,
  MessengerFile,
  MessengerImage,
  MessengerText,
  MessengerVideo
});
