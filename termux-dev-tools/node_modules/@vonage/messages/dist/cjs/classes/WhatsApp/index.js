"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/classes/WhatsApp/index.ts
var WhatsApp_exports = {};
__export(WhatsApp_exports, {
  WhatsAppAudio: () => WhatsAppAudio,
  WhatsAppCustom: () => WhatsAppCustom,
  WhatsAppFile: () => WhatsAppFile,
  WhatsAppImage: () => WhatsAppImage,
  WhatsAppReaction: () => WhatsAppReaction,
  WhatsAppSticker: () => WhatsAppSticker,
  WhatsAppTemplate: () => WhatsAppTemplate,
  WhatsAppText: () => WhatsAppText,
  WhatsAppVideo: () => WhatsAppVideo
});
module.exports = __toCommonJS(WhatsApp_exports);

// lib/classes/AbstractMessage.ts
var AbstractMessage = class {
  /**
   * The recipient of the message.
   */
  to;
  /**
   * The sender of the message.
   */
  from;
  /**
   * An optional client reference for the message.
   */
  clientRef;
  /**
   * Specifies the URL to which Status Webhook messages will be sent for this
   * particular message. Over-rides account-level and application-level Status
   * Webhook url settings on a per-message basis.
   */
  webhookUrl;
  /**
   * Specifies which version of the Messages API will be used to send Status
   * Webhook messages for this particular message. For example, if v0.1 is
   * set, then the JSON body of Status Webhook messages for this message will
   * be sent in Messages v0.1 format. Over-rides account-level and
   * application-level API version settings on a per-message basis.
   */
  webhookVersion;
  /**
   * Constructs a new `AbstractMessage` instance.
   *
   * @param {MessageParams} params - The parameters for creating a message.
   */
  constructor(params) {
    this.to = params.to;
    this.from = params.from;
    this.clientRef = params.clientRef;
    this.webhookUrl = params.webhookUrl;
    this.webhookVersion = params.webhookVersion;
  }
};

// lib/classes/AbstractAudioMessage.ts
var AbstractAudioMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'audio').
   */
  messageType = "audio" /* AUDIO */;
  audio;
  /**
   * Constructs a new `AbstractAudioMessage` instance.
   *
   * @param {MessageParamsAudio} params - The parameters for creating an audio message.
   */
  constructor(params) {
    super(params);
    this.audio = params.audio;
  }
};

// lib/classes/WhatsApp/WhatsAppAudio.ts
var WhatsAppAudio = class extends AbstractAudioMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Sends an audio message to a WhatsApp user.
   *
   * @param {WhatsAppAudioParams} params - The parameters for creating a WhatsApp audio message.
   * @example
   * ```ts
   * import { WhatsAppAudio } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppAudio({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  audio: {
   *    url: 'https://example.com/audio.mp3',
   *    caption: 'This is an audio message',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppCustom.ts
var WhatsAppCustom = class extends AbstractMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  /**
   * The type of message (always 'custom').
   */
  messageType = "custom" /* CUSTOM */;
  custom;
  context;
  /**
   * Sends a custom message to a WhatsApp user.
   *
   * @param {WhatsAppCustomParams} params - The parameters for creating a WhatsApp custom message.
   * @example
   * ```ts
   * import { WhatsAppCustom } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppCustom({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  custom: {
   *    type: 'template',
   *    template: {
   *      namespace: 'your-namespace',
   *      name: 'your-template-name',
   *    },
   *  }
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.custom = params.custom;
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/AbstractFileMessage.ts
var AbstractFileMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'file').
   */
  messageType = "file" /* FILE */;
  file;
  /**
   * Constructs a new `AbstractFileMessage` instance.
   *
   * @param {MessageParamsFile} params - The parameters for creating a file message.
   */
  constructor(params) {
    super(params);
    this.file = params.file;
  }
};

// lib/classes/WhatsApp/WhatsAppFile.ts
var WhatsAppFile = class extends AbstractFileMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Send a WhatsApp file message.
   *
   * @param {WhatsAppFileParams} params - The parameters for creating a WhatsApp file message.
   * @example
   * ```ts
   * import { WhatsAppFile } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppFile({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  file: {
   *    url: 'https://example.com/image.jpg',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/AbstractImageMessage.ts
var AbstractImageMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'image').
   */
  messageType = "image" /* IMAGE */;
  image;
  /**
   * Constructs a new `AbstractImageMessage` instance.
   *
   * @param {MessageParamsImage} params - The parameters for creating an image message.
   */
  constructor(params) {
    super(params);
    this.image = params.image;
  }
};

// lib/classes/WhatsApp/WhatsAppImage.ts
var WhatsAppImage = class extends AbstractImageMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Sends an image message to a WhatsApp user.
   *
   * @param {WhatsAppImageParams} params - The parameters for creating a WhatsApp image message.
   * @example
   * ```ts
   * import { WhatsAppImage } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppImage({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  image: {
   *    url: 'https://example.com/image.jpg',
   *    caption: 'This is an image message',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppSticker.ts
var WhatsAppSticker = class extends AbstractMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  /**
   * The type of message (always 'sticker').
   */
  messageType = "sticker" /* STICKER */;
  sticker;
  context;
  /**
   * Send a sticker message to a WhatsApp user.
   *
   * @param {WhatsAppStickerParams} params - The parameters for creating a WhatsApp sticker message.
   * @example
   * Send a sticker message with a sticker ID:
   * ```ts
   * import { WhatsAppSticker } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppSticker({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  sticker: {
   *    id: '0-0',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   *
   * @example
   * Send a sticker message with a sticker URL:
   * ```ts
   * import { WhatsAppSticker } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppSticker({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  sticker: {
   *    url: 'https://example.com/sticker.png',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.sticker = params.sticker;
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppTemplate.ts
var WhatsAppTemplate = class extends AbstractMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  /**
   * The type of message (always 'template').
   */
  messageType = "template" /* TEMPLATE */;
  whatsapp;
  template;
  context;
  /**
   * Send a template message to a WhatsApp user.
   *
   * @param {WhatsAppTemplateParams} params - The parameters for creating a WhatsApp template message.
   *
   * @example
   * ```ts
   * import { WhatsAppTemplate, WhatsAppLanguageCode } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppTemplate({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  whatsapp: {
   *    policy: 'deterministic',
   *    locale: WhatsAppLanguageCode.EN,
   *  },
   *  template: {
   *    name: 'your-template-name',
   *    parameters: [
   *      'foo',
   *      'bar',
   *    ],
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.whatsapp = params.whatsapp;
    this.template = params.template;
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/AbstractTextMessage.ts
var AbstractTextMessage = class extends AbstractMessage {
  /**
   * The type of message (always 'text').
   */
  messageType = "text" /* TEXT */;
  /**
   * The text content of the message.
   */
  text;
  /**
   * Constructs a new `AbstractTextMessage` instance for text messages.
   *
   * @param {MessageParamsText} params - The parameters for creating a text message.
   */
  constructor(params) {
    super(params);
    this.text = params.text;
  }
};

// lib/classes/WhatsApp/WhatsAppText.ts
var WhatsAppText = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Send a WhatsApp text message.
   *
   * @param {WhatsAppTextParams} params - The parameters for creating a WhatsApp text message.
   * @example
   * ```ts
   * import { WhatsAppText } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppText({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/AbstractVideoMessage.ts
var AbstractVideoMessage = class extends AbstractMessage {
  /**
   * The type of message, which is 'video' for video messages.
   */
  messageType = "video" /* VIDEO */;
  /**
   * The video content of the message.
   */
  video;
  /**
   * Constructs a new `AbstractVideoMessage` instance for video messages.
   *
   * @param {MessageParamsVideo} params - The parameters for creating a video message.
   */
  constructor(params) {
    super(params);
    this.video = params.video;
  }
};

// lib/classes/WhatsApp/WhatsAppVideo.ts
var WhatsAppVideo = class extends AbstractVideoMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  context;
  /**
   * Sends a video message to a WhatsApp user.
   *
   * @param {WhatsAppVideoParams} params - The parameters for creating a WhatsApp video message.
   *
   * @example
   * ```ts
   * import { WhatsAppVideo } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppVideo({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  video: {
   *    url: 'https://example.com/video.mp4',
   *    caption: 'This is a video message',
   *  },
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    if (params.context) {
      this.context = params.context;
    }
  }
};

// lib/classes/WhatsApp/WhatsAppReaction.ts
var WhatsAppReaction = class extends AbstractMessage {
  /**
   * The channel for this message (always 'whatsapp').
   */
  channel = "whatsapp" /* WHATSAPP */;
  /**
   * The type of message (always 'reaction').
   */
  messageType = "reaction" /* REACTION */;
  /**
   * The reaction to send
   */
  reaction;
  /**
   * The WhatsApp Context
   */
  context;
  /**
   * Sends a reaction message to a WhatsApp user.
   *
   * @param {WhatsAppReactionParams} params - The parameters for creating a WhatsApp reaction message.
   * @example
   * Send a reaction
   * ```ts
   * import { WhatsAppReaction } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppReaction({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  reaction: {
   *    action: 'react',
   *    emoji: '😍',
   *  }
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   *
   * @example
   * Remove reaction
   * ```ts
   * import { WhatsAppReaction } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new WhatsAppReaction({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  reaction: {
   *    action: 'unreact',
   *  }
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params) {
    super(params);
    this.reaction = params.reaction;
    if (params.context) {
      this.context = params.context;
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  WhatsAppAudio,
  WhatsAppCustom,
  WhatsAppFile,
  WhatsAppImage,
  WhatsAppReaction,
  WhatsAppSticker,
  WhatsAppTemplate,
  WhatsAppText,
  WhatsAppVideo
});
