import { AbstractVideoMessage } from '../AbstractVideoMessage.js';
import { Channels } from '../../enums/Channels.js';
import { RCSVideoParams } from '../../types/Channels/RCS/RCSVideoParams.js';
import '../AbstractMessage.js';
import '../../enums/MessageTypes.js';
import '../../types/MessageParams.js';
import '../../types/MessageParamsVideo.js';
import '../../types/MessageVideoType.js';
import '../../types/Channels/RCS/RCSParams.js';

/**
 * Represents an video message for the RCS channel.
 *
 * @group RCS
 */
declare class RCSVideo extends AbstractVideoMessage implements RCSVideoParams {
    /**
     * The channel for this message (always 'rcs').
     */
    channel: Channels.RCS;
    /**
     * The duration in seconds the delivery of a message will be attempted. By
     * default Vonage attempts delivery for 72 hours, however the maximum effective
     * value depends on the operator and is typically 24 - 48 hours. We recommend
     * this value should be kept at its default or at least 30 minutes.
     */
    ttl?: number;
    /**
     * Send an RCS video message.
     *
     * @param {RCSVideoParams} params - The parameters for creating the video message.
     *
     * @example
     * ```ts
     * import { RCSVideo } from '@vonage/messages';
     *
     * const { messageUUID } = await messagesClient.send(new RCSVideo({
     *  to: TO_NUMBER,
     *  from: FROM_NUMBER,
     *  audio: {
     *    url: 'https://example.com/video.mp4',
     *  },
     *  clientRef: 'my-personal-reference',
     * }));
     *
     * console.log(`Message sent successfully with UUID ${messageUUID}`);
     * ```
     */
    constructor(params: RCSVideoParams);
}

export { RCSVideo };
