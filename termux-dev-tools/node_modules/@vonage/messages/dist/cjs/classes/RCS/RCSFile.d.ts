import { AbstractFileMessage } from '../AbstractFileMessage.js';
import { MessageParams } from '../../types/MessageParams.js';
import { Channels } from '../../enums/Channels.js';
import { RCSFileParams } from '../../types/Channels/RCS/RCSFileParams.js';
import '../AbstractMessage.js';
import '../../enums/MessageTypes.js';
import '../../types/MessageFileType.js';
import '../../types/MessageParamsFile.js';
import '../../types/Channels/RCS/RCSParams.js';

/**
 * Represents a file message for the RCS channel.
 *
 * @group RCS
 */
declare class RCSFile extends AbstractFileMessage implements RCSFileParams, MessageParams {
    /**
     * The channel for this message (always 'rcs').
     */
    channel: Channels.RCS;
    /**
     * The duration in seconds the delivery of a message will be attempted. By
     * default Vonage attempts delivery for 72 hours, however the maximum effective
     * value depends on the operator and is typically 24 - 48 hours. We recommend
     * this value should be kept at its default or at least 30 minutes.
     */
    ttl?: number;
    /**
     * Sends a file message to the RCS channel.
     *
     * @param {RCSFileParams} params - The parameters for creating a RCS file message.
     *
     * @example
     * ```ts
     * import { RCSFile } from '@vonage/messages';
     *
     * const { messageUUID } = await messagesClient.send(new RCSFile({
     *  to: TO_NUMBER,
     *  from: FROM_NUMBER,
     *  file: {
     *    url: 'https://example.com/image.pdf',
     *  },
     *  clientRef: 'my-personal-reference',
     * }));
     *
     * console.log(`Message sent successfully with UUID ${messageUUID}`);
     * ```
     */
    constructor(params: Omit<MessageParams, 'channel' | 'messageType'> & RCSFileParams);
}

export { RCSFile };
