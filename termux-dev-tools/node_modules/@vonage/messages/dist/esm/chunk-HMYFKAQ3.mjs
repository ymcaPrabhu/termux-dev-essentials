// lib/messages.ts
import { Client, AuthenticationType } from "@vonage/server-client";
import debug from "debug";
var log = debug("vonage:messages");
var Messages = class extends Client {
  /**
   * Adds authentication details to the given request based on the configured
   * authentication type. Handle various ways the Messages API handles auth
   * The Messages API handles both JWT (preferred) as well as Basic so we
   * cannot just set a local authType
   *
   * @param {VetchOptions} request - The request to which authentication should be added.
   * @return {Promise<VetchOptions>} A promise that resolves to the request with added authentication.
   */
  async addAuthenticationToRequest(request) {
    log("Auth config", this.auth);
    this.authType = AuthenticationType.BASIC;
    if (this.auth.applicationId && this.auth.privateKey) {
      log("Adding JWT token to request");
      this.authType = AuthenticationType.JWT;
    }
    if (this.auth.signature) {
      log("Signing the request");
      this.authType = AuthenticationType.SIGNATURE;
    }
    return super.addAuthenticationToRequest(request);
  }
  /**
   * Sends a message using the Vonage API.
   *
   * @param {SendMessageParams} message - The message to be sent.
   * @return {Promise<MessageSuccess>} A promise that resolves to a success response with a message UUID.
   */
  async send(message) {
    const data = Client.transformers.snakeCaseObjectKeys(message, true);
    if ("custom" in message) {
      data.custom = message.custom;
    }
    const resp = await this.sendPostRequest(
      `${this.config.apiHost}/v1/messages`,
      data
    );
    return {
      messageUUID: resp.data.message_uuid
    };
  }
  /**
   * Update the status of outbound and/or inbound messages for certain
   * channels. For example, you can revoke outbound messages or mark inbound
   * messages as read.
   *
   * Please not that this endpoint is region specifc. You will need to set the
   * region when you create the client.
   *
   * @example
   * Update the status of a WhatsApp message to "read"
   * ```ts
   * const vonage = new Vonage(
   *   {
   *     applicationId: myAppId,
   *     privateKey: myPrivateKey
   *   },
   *   {
   *     apiHost: 'https://api-eu.vonage.com'
   *   }
   * )
   *
   * await vonage.messages.updateMessage(messageId, UpdateMessageStatus.READ);
   * ```
   *
   * @param {string} messageId - The ID of the message to update.
   * @param {UpdateMessageStatus | string} status - The status to update the message to.
   *
   * @return {Promise<true>} A promise that resolves to true if the message was
   * updated successfully.
   */
  async updateMessage(messageId, status) {
    await this.sendPatchRequest(
      `${this.config.apiHost}/v1/messages/${messageId}`,
      { status }
    );
    return true;
  }
};

export {
  Messages
};
