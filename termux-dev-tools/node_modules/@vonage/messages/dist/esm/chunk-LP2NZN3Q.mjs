import {
  AbstractTextMessage
} from "./chunk-LJPOB7FU.mjs";

// lib/classes/SMS/SMS.ts
import debug from "debug";
var log = debug("vonage:messages:sms");
var SMS = class extends AbstractTextMessage {
  /**
   * The channel for this message (always 'sms').
   */
  channel = "sms" /* SMS */;
  sms;
  /**
   * The duration in seconds the delivery of an SMS will be attempted. By
   * default Vonage attempts delivery for 72 hours, however the maximum
   * effective value depends on the operator and is typically 24 - 48 hours. We
   * recommend this value should be kept at its default or at least 30 minutes.
   */
  ttl;
  /**
   * Send an SMS message
   *
   * @param {MessageParamsText | string} params - The message parameters or text message.
   * @param {string} to - The recipient's phone number.
   * @param {string} from - The sender's phone number.
   * @param {string} clientRef - The client reference for the message.
   *
   * @example
   * ```ts
   * import { SMS } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new SMS({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  clientRef: 'my-personal-reference',
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   *
   * @example
   * Send SMS with entity ID and content ID
   * ```ts
   * import { SMS } from '@vonage/messages';
   *
   * const { messageUUID } = await messagesClient.send(new SMS({
   *  to: TO_NUMBER,
   *  from: FROM_NUMBER,
   *  text: 'Hello world',
   *  clientRef: 'my-personal-reference',
   *  sms: {
   *    entityId: 'MyEntityID',
   *    contentId: 'MyContentID'
   *  }
   * }));
   *
   * console.log(`Message sent successfully with UUID ${messageUUID}`);
   * ```
   */
  constructor(params, to, from, clientRef) {
    if (to) {
      log("Please update the call to pass in an object instead of parameters");
      params = {
        text: params,
        to,
        from,
        clientRef
      };
    }
    super(params);
    if (typeof params === "string") {
      return;
    }
    this.ttl = params.ttl;
    this.sms = params.sms ? {
      encodingType: params.sms?.encodingType,
      contentId: params.sms?.contentId,
      entityId: params.sms?.entityId
    } : void 0;
  }
};

export {
  SMS
};
