"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/enums/index.ts
var enums_exports = {};
__export(enums_exports, {
  ChannelType: () => ChannelType,
  ConversationState: () => ConversationState,
  EventMessageType: () => EventMessageType,
  EventType: () => EventType,
  LegStatus: () => LegStatus,
  MemberState: () => MemberState,
  ReasonCode: () => ReasonCode
});
module.exports = __toCommonJS(enums_exports);

// lib/enums/channelType.ts
var ChannelType = /* @__PURE__ */ ((ChannelType2) => {
  ChannelType2["PHONE"] = "phone";
  ChannelType2["SIP"] = "sip";
  ChannelType2["APP"] = "app";
  ChannelType2["WEBSOCKET"] = "websocket";
  ChannelType2["VBC"] = "vbc";
  return ChannelType2;
})(ChannelType || {});

// lib/enums/conversationState.ts
var ConversationState = /* @__PURE__ */ ((ConversationState2) => {
  ConversationState2["ACTIVE"] = "ACTIVE";
  ConversationState2["INACTIVE"] = "INACTIVE";
  ConversationState2["DELETED"] = "DELETED";
  return ConversationState2;
})(ConversationState || {});

// lib/enums/eventMessageType.ts
var EventMessageType = /* @__PURE__ */ ((EventMessageType2) => {
  EventMessageType2["TEXT"] = "text";
  EventMessageType2["IMAGE"] = "image";
  EventMessageType2["AUDIO"] = "audio";
  EventMessageType2["VIDEO"] = "video";
  EventMessageType2["FILE"] = "file";
  EventMessageType2["TEMPLATE"] = "template";
  EventMessageType2["CUSTOM"] = "custom";
  EventMessageType2["VCARD"] = "vcard";
  EventMessageType2["LOCATION"] = "location";
  EventMessageType2["RANDOM"] = "random";
  return EventMessageType2;
})(EventMessageType || {});

// lib/enums/eventsTypes.ts
var EventType = /* @__PURE__ */ ((EventType2) => {
  EventType2["AUDIO_PLAY"] = "audio:play";
  EventType2["AUDIO_PLAY_STOP"] = "audio:play:stop";
  EventType2["AUDIO_SAY"] = "audio:say";
  EventType2["AUDIO_SAY_STOP"] = "audio:say:stop";
  EventType2["AUDIO_DTMF"] = "audio:dtmf";
  EventType2["AUDIO_RECORD"] = "audio:record";
  EventType2["AUDIO_RECORD_STOP"] = "audio:record:stop";
  EventType2["AUDIO_MUTE_ON"] = "audio:mute:on";
  EventType2["AUDIO_MUTE_OFF"] = "audio:mute:off";
  EventType2["AUDIO_EAR_MUFF_ON"] = "audio:earmuff:on";
  EventType2["AUDIO_EAR_MUFF_OFF"] = "audio:earmuff:off";
  EventType2["AUDIO_SPEAKING_ON"] = "audio:speaking:on";
  EventType2["AUDIO_SPEAKING_OFF"] = "audio:speaking:off";
  EventType2["CUSTOM"] = "custom";
  EventType2["EPHEMERAL"] = "ephemeral";
  EventType2["MESSAGE"] = "message";
  EventType2["MESSAGE_SUBMITTED"] = "message:submitted";
  EventType2["MESSAGE_REJECTED"] = "message:rejected";
  EventType2["MESSAGE_UNDELIVERABLE"] = "message:undeliverable";
  EventType2["MESSAGE_SEEN"] = "message:seen";
  EventType2["MESSAGE_DELIVERED"] = "message:delivered";
  return EventType2;
})(EventType || {});

// lib/enums/legStatus.ts
var LegStatus = /* @__PURE__ */ ((LegStatus2) => {
  LegStatus2["STARTED"] = "started";
  LegStatus2["RINGING"] = "ringing";
  LegStatus2["ANSWERED"] = "answered";
  return LegStatus2;
})(LegStatus || {});

// lib/enums/memberState.ts
var MemberState = /* @__PURE__ */ ((MemberState2) => {
  MemberState2["INVITED"] = "INVITED";
  MemberState2["JOINED"] = "JOINED";
  MemberState2["LEFT"] = "LEFT";
  MemberState2["UNKNOWN"] = "UNKNOWN";
  return MemberState2;
})(MemberState || {});

// lib/enums/reasonMessages.ts
var ReasonCode = /* @__PURE__ */ ((ReasonCode2) => {
  ReasonCode2["FAILED"] = "failed";
  ReasonCode2["BUSY"] = "busy";
  ReasonCode2["TIMEOUT"] = "timeout";
  ReasonCode2["CANCELLED"] = "cancelled";
  ReasonCode2["REJECTED"] = "rejected";
  ReasonCode2["OK"] = "ok";
  ReasonCode2["NOT_FOUND"] = "not_found";
  ReasonCode2["REQUEST_TERMINATED"] = "request_terminated";
  ReasonCode2["BAD_EXTENSION"] = "bad_extension";
  ReasonCode2["BUSY_HERE"] = "busy_here";
  ReasonCode2["REQUEST_TIMEOUT"] = "request_timeout";
  ReasonCode2["TEMPORARILY_UNAVAILABLE"] = "temporarily_unavailable";
  ReasonCode2["FORBIDDEN"] = "forbidden";
  ReasonCode2["GONE"] = "gone";
  ReasonCode2["BAD_GATEWAY"] = "bad_gateway";
  ReasonCode2["ADDRESS_INCOMPLETE"] = "address_incomplete";
  ReasonCode2["SERVER_INTERNAL_ERROR"] = "server_internal_error";
  ReasonCode2["NOT_IMPLEMENTED"] = "not_implemented";
  ReasonCode2["SERVER_TIMEOUT"] = "server_timeout";
  ReasonCode2["VERSION_NOT_SUPPORTED"] = "version_not_supported";
  ReasonCode2["SERVICE_UNAVAILABLE"] = "service_unavailable";
  ReasonCode2["PAYMENT_REQUIRED"] = "payment_required";
  ReasonCode2["BANNED_CALL_ENDED"] = "banned_call_ended";
  ReasonCode2["FLOW_FAILED"] = "flow_failed";
  return ReasonCode2;
})(ReasonCode || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ChannelType,
  ConversationState,
  EventMessageType,
  EventType,
  LegStatus,
  MemberState,
  ReasonCode
});
