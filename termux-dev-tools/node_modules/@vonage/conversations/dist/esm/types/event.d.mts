import { EventType } from '../enums/eventsTypes.mjs';
import { AnyMessageBody } from './anyMessageBody.mjs';
import { EventUser } from './eventUser.mjs';
import './messageASRBody.mjs';
import './messageChannelBody.mjs';
import '../enums/channelType.mjs';
import './anyChannel.mjs';
import './phoneNumberChannel.mjs';
import './sipChannel.mjs';
import './appChannel.mjs';
import './websocketChannel.mjs';
import './vbcChannel.mjs';
import './messageAudioBody.mjs';
import '../enums/eventMessageType.mjs';
import './messageConversationBody.mjs';
import '../enums/conversationState.mjs';
import './messageCustomBody.mjs';
import './messageEventBody.mjs';
import './messageFileBody.mjs';
import './messageImageBody.mjs';
import './messageLegBody.mjs';
import '@vonage/messages';
import '@vonage/voice';
import '../enums/legStatus.mjs';
import '../enums/reasonMessages.mjs';
import './messageLocationBody.mjs';
import './messageMemberBody.mjs';
import './member.mjs';
import '@vonage/users';
import '../enums/memberState.mjs';
import './audioSettings.mjs';
import './parameters/updateMemberParameters.mjs';
import './messageRTCAnswerBody.mjs';
import './messageRTCIdBody.mjs';
import './messageRecordBody.mjs';
import './messageRecordIdBody.mjs';
import './messageSIPDirectionBody.mjs';
import './messageSIPBody.mjs';
import './messageSIPHangupBody.mjs';
import './messageSIPMachineBody.mjs';
import './messageSIPStatusBody.mjs';
import './messageSayBody.mjs';
import './messageSayIdBody.mjs';
import './messageStatusBody.mjs';
import './messageTemplateBody.mjs';
import './messageTextBody.mjs';
import './messageVCardBody.mjs';
import './messageVideoBody.mjs';

type Event = {
    /**
     * The ID of the message.
     */
    id: number;
    /**
     * Message type
     */
    type: EventType;
    /**
     * Member ID of the event.
     */
    from: string;
    /**
     * Data of the event.
     */
    body: AnyMessageBody;
    /**
     * Timestamp of the event.
     */
    timestamp?: string;
    /**
     * Sender User
     */
    fromUser?: EventUser;
    /**
     * Sender Memeber
     */
    fromMember?: {
        /**
         * Member ID
         */
        id: string;
    };
};

export type { Event };
