import { APILinks } from '@vonage/server-client';
import { AnyMessageBody } from '../anyMessageBody.mjs';
import { Event } from '../event.mjs';
import { EventUser } from '../eventUser.mjs';
import '../messageASRBody.mjs';
import '../messageChannelBody.mjs';
import '../../enums/channelType.mjs';
import '../anyChannel.mjs';
import '../phoneNumberChannel.mjs';
import '../sipChannel.mjs';
import '../appChannel.mjs';
import '../websocketChannel.mjs';
import '../vbcChannel.mjs';
import '../messageAudioBody.mjs';
import '../../enums/eventMessageType.mjs';
import '../messageConversationBody.mjs';
import '../../enums/conversationState.mjs';
import '../messageCustomBody.mjs';
import '../messageEventBody.mjs';
import '../messageFileBody.mjs';
import '../messageImageBody.mjs';
import '../messageLegBody.mjs';
import '@vonage/messages';
import '@vonage/voice';
import '../../enums/legStatus.mjs';
import '../../enums/reasonMessages.mjs';
import '../messageLocationBody.mjs';
import '../messageMemberBody.mjs';
import '../member.mjs';
import '@vonage/users';
import '../../enums/memberState.mjs';
import '../audioSettings.mjs';
import '../parameters/updateMemberParameters.mjs';
import '../messageRTCAnswerBody.mjs';
import '../messageRTCIdBody.mjs';
import '../messageRecordBody.mjs';
import '../messageRecordIdBody.mjs';
import '../messageSIPDirectionBody.mjs';
import '../messageSIPBody.mjs';
import '../messageSIPHangupBody.mjs';
import '../messageSIPMachineBody.mjs';
import '../messageSIPStatusBody.mjs';
import '../messageSayBody.mjs';
import '../messageSayIdBody.mjs';
import '../messageStatusBody.mjs';
import '../messageTemplateBody.mjs';
import '../messageTextBody.mjs';
import '../messageVCardBody.mjs';
import '../messageVideoBody.mjs';
import '../../enums/eventsTypes.mjs';

type SnakeToCamelCase<Key extends string> = Key extends `${infer FirstPart}_${infer FirstLetter}${infer LastPart}` ? `${FirstPart}${Uppercase<FirstLetter>}${SnakeToCamelCase<LastPart>}` : Key;
type EventUserResponse = {
    display_name: string;
} & Omit<EventUser, 'displayName'>;
type AnyMessageBodyResponse = {
    [P in keyof AnyMessageBody as SnakeToCamelCase<P>]: AnyMessageBody[P];
};
type EventResponse = {
    body: AnyMessageBodyResponse;
    _embedded: {
        from_user: EventUserResponse;
        from_member: {
            id: string;
        };
    };
} & Omit<Event, 'fromUser' | 'body' | 'fromMember'> & APILinks;

export type { AnyMessageBodyResponse, EventResponse, EventUserResponse };
