"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/accounts.ts
var accounts_exports = {};
__export(accounts_exports, {
  Accounts: () => Accounts
});
module.exports = __toCommonJS(accounts_exports);
var import_server_client = require("@vonage/server-client");
var Accounts = class extends import_server_client.Client {
  /**
   * @see {@link Client.authType}
   */
  authType = import_server_client.AuthenticationType.BASIC;
  /**
   * Retrieves the current balance of the Vonage API account.
   * @see {@link https://rest.nexmo.com/account/get-balance}
   * @return {Promise<GetBalanceResponse>} The current balance of the account in EUR.
   *
   * @example
   *
   * const balance = await accontClient.getBalance();
   *
   * console.log(`The current account balance is ${balance.value} ${balance.currency}`);
   * console.log(`Auto-reload is ${balance.autoReload ? 'enabled' : 'disabled'}`);
   */
  async getBalance() {
    const response = await this.sendGetRequest(
      `${this.config.restHost}/account/get-balance`
    );
    return response.data;
  }
  /**
   * Tops up the account balance when auto-reload is enabled.
   * The top-up amount corresponds to the amount added when auto-reload was enabled.
   * @see {@link https://rest.nexmo.com/account/top-up}
   * @param {string} trx - The transaction reference for the balance addition and auto-reload activation.
   * @return {Promise<TopUpBalanceResponse>} Response indicating the success of the operation.
   *
   * @example
   *
   * const response = await accountClient.topUpBalance('00X123456Y7890123Z');
   *
   * if (response['error-code'] === '200') {
   *   console.log(`The account balance has been topped up`);
   * } else {
   *   console.log(`The account balance could not be topped up`);
   * }
   *
   */
  async topUpBalance(trx) {
    const response = await this.sendFormSubmitRequest(
      `${this.config.restHost}/account/top-up`,
      { trx }
    );
    return response.data;
  }
  /**
   * Updates the default webhook URLs associated with the account for:
   * - Inbound SMS messages
   * - Delivery receipts
   * @see {@link https://rest.nexmo.com/account/settings}
   * @param {AccountCallbacks} callbacks - The new callback URLs for the account.
   * @return {Promise<AccountUpdateResponse>} Details of the updated or current settings.
   *
   * @example
   *
   * const callbacks = {
   *   moCallBackUrl: 'https://example.com/webhooks/inbound-sms',
   *   drCallBackUrl: 'https://example.com/webhooks/delivery-receipts',
   * };
   *
   * const response = await accountClient.updateAccountCallbacks(callbacks);
   *
   * for (const [key, value] of Object.entries(response)) {
   *   console.log(`New ${key}: ${value}`);
   * }
   */
  async updateAccountCallbacks(callbacks) {
    const response = await this.sendFormSubmitRequest(
      `${this.config.restHost}/account/settings`,
      callbacks
    );
    return response.data;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Accounts
});
