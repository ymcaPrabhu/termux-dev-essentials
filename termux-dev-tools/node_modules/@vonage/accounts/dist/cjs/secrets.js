"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/secrets.ts
var secrets_exports = {};
__export(secrets_exports, {
  Secrets: () => Secrets
});
module.exports = __toCommonJS(secrets_exports);
var import_server_client = require("@vonage/server-client");
var Secrets = class extends import_server_client.Client {
  authType = import_server_client.AuthenticationType.BASIC;
  /**
   * Create a new API secret for a given API key.
   *
   * @param {string} apiKey - The API key to manage secrets for.
   * @param {string} secret - The new secret. It must follow the provided rules:
   *   - Minimum 8 characters.
   *   - Maximum 25 characters.
   *   - At least 1 lowercase character.
   *   - At least 1 uppercase character.
   *   - At least 1 digit.
   *
   * @return {Promise<APISecretResponse>} A promise that resolves to an object representing the created API secret.
   *
   * @example
   * const { id } = await secretClient.createSecret(
   *  'new-api-key',
   *  'SuperSecret123!'
   * );
   *
   * console.log(`Created secret with ID ${id}`);
   */
  async createSecret(apiKey, secret) {
    const response = await this.sendPostRequest(
      `${this.config.apiHost}/accounts/${apiKey}/secrets`,
      { secret }
    );
    return response.data;
  }
  /**
   * Revoke (delete) an existing API secret for a given API key.
   *
   * @param {string} apiKey - The API key to manage secrets for.
   * @param {string} id - The ID of the API secret to revoke.
   * @return {Promise<void>} A promise that resolves when the secret has been revoked.
   *
   * @example
   * await secretClient.deleteSecret('my-api-key', 'my-secret-id');
   */
  async deleteSecret(apiKey, id) {
    await this.sendDeleteRequest(
      `${this.config.apiHost}/accounts/${apiKey}/secrets/${id}`
    );
  }
  /**
   * Retrieve the details of a specific API secret for a given API key.
   *
   * @param {string} apiKey - The API key to manage secrets for.
   * @param {string} id - The ID of the API secret to retrieve.
   * @return {Promise<APISecretResponse>} A promise that resolves to an object representing the API secret.
   *
   * @example
   * const { id } = await secretClient.getSecret('my-api-key', 'my-secret-id');
   * console.log(`Secret with ID ${id} has been retrieved`);
   *
   */
  async getSecret(apiKey, id) {
    const response = await this.sendGetRequest(
      `${this.config.apiHost}/accounts/${apiKey}/secrets/${id}`
    );
    return response.data;
  }
  /**
   * List all the secrets associated with a particular API key.
   *
   * @param {string} apiKey - The API key for which to list secrets.
   *
   * @return {Promise<ListAPISecretsResponse>} A promise that resolves to an object containing a list of API secrets.
   *
   * @example
   * const response = await secretClient.listSecrets('my-api-key');
   *
   * for (const secret of response._embedded.secrets) {
   *   console.log(`Secret with ID ${secret.id} has been retrieved`);
   * }
   */
  async listSecrets(apiKey) {
    const response = await this.sendGetRequest(
      `${this.config.apiHost}/accounts/${apiKey}/secrets`
    );
    return response.data;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Secrets
});
