"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/index.ts
var index_exports = {};
__export(index_exports, {
  Feature: () => Feature,
  LineType: () => LineType,
  MessagesCallbackTypeEnum: () => MessagesCallbackTypeEnum,
  Numbers: () => Numbers,
  SearchPattern: () => SearchPattern,
  VoiceCallbackTypeEnum: () => VoiceCallbackTypeEnum
});
module.exports = __toCommonJS(index_exports);

// lib/enums/Feature.ts
var Feature = /* @__PURE__ */ ((Feature2) => {
  Feature2["MMS"] = "MMS";
  Feature2["SMS"] = "SMS";
  Feature2["VOICE"] = "VOICE";
  return Feature2;
})(Feature || {});

// lib/enums/LineType.ts
var LineType = /* @__PURE__ */ ((LineType2) => {
  LineType2["LANDLINE"] = "landline";
  LineType2["MOBILE_LVN"] = "mobile-lvn";
  LineType2["LANDLINE_TOLL_FREE"] = "landline-toll-free";
  return LineType2;
})(LineType || {});

// lib/enums/MessagesCallbackTypeEnum.ts
var MessagesCallbackTypeEnum = /* @__PURE__ */ ((MessagesCallbackTypeEnum2) => {
  MessagesCallbackTypeEnum2["App"] = "app";
  return MessagesCallbackTypeEnum2;
})(MessagesCallbackTypeEnum || {});

// lib/enums/SearchPattern.ts
var SearchPattern = /* @__PURE__ */ ((SearchPattern2) => {
  SearchPattern2[SearchPattern2["START_WITH"] = 0] = "START_WITH";
  SearchPattern2[SearchPattern2["CONTAINS"] = 1] = "CONTAINS";
  SearchPattern2[SearchPattern2["ENDS_WITH"] = 2] = "ENDS_WITH";
  return SearchPattern2;
})(SearchPattern || {});

// lib/enums/VoiceCallbackTypeEnum.ts
var VoiceCallbackTypeEnum = /* @__PURE__ */ ((VoiceCallbackTypeEnum2) => {
  VoiceCallbackTypeEnum2["Sip"] = "sip";
  VoiceCallbackTypeEnum2["Tel"] = "tel";
  VoiceCallbackTypeEnum2["App"] = "app";
  return VoiceCallbackTypeEnum2;
})(VoiceCallbackTypeEnum || {});

// lib/numbers.ts
var import_server_client = require("@vonage/server-client");
var import_lodash = __toESM(require("lodash.omit"));
var buildSearch = ({
  endsWith,
  startsWith,
  contains,
  searchPattern,
  pattern,
  country
}) => {
  searchPattern = searchPattern ?? 1 /* CONTAINS */;
  if (pattern) {
    return {
      search_pattern: searchPattern,
      pattern,
      country
    };
  }
  if (contains) {
    return {
      search_pattern: 1 /* CONTAINS */,
      pattern: contains,
      country
    };
  }
  if (endsWith) {
    return {
      search_pattern: 2 /* ENDS_WITH */,
      pattern: endsWith,
      country
    };
  }
  if (startsWith) {
    return {
      search_pattern: 0 /* START_WITH */,
      pattern: startsWith,
      country
    };
  }
  return {};
};
var sortFeatures = (features) => {
  if (features.length > 4) {
    throw new Error("Invalid number of features request");
  }
  if (features.length === 1) {
    return features.join();
  }
  if (features.length === 3) {
    return ["SMS" /* SMS */, "MMS" /* MMS */, "VOICE" /* VOICE */].join(",");
  }
  const newOrder = [];
  if (features.includes("SMS" /* SMS */)) {
    newOrder.push("SMS" /* SMS */);
  }
  if (features.includes("VOICE" /* VOICE */)) {
    newOrder.push("VOICE" /* VOICE */);
  }
  if (features.includes("MMS" /* MMS */)) {
    newOrder.push("MMS" /* MMS */);
  }
  return newOrder.join(",");
};
var Numbers = class extends import_server_client.Client {
  /**
   * @see {@link Client.authType}
   */
  authType = import_server_client.AuthenticationType.BASIC;
  /**
   * Buy a phone number.
   *
   * @param {NumbersParams} params - The parameters for buying a number.
   * @return {Promise<NumbersEmptyResponse>} A promise that resolves to an empty response or an error response.
   *
   * @example
   * Buy a phone number
   * ```ts
   * import { Country } from '@vonage/numbers';
   * const resp = await numbersClient.buyNumber({
   *   country: Country.US,
   *   msisdn: '15555555555'
   * });
   *
   * if (resp.errorCode) {
   *   console.log(`Error: ${resp.errorCodeLabel}`);
   * } else {
   *   console.log('Number bought successfully');
   * }
   * ```
   */
  async buyNumber(params) {
    const resp = await this.sendFormSubmitRequest(
      `${this.config.restHost}/number/buy`,
      import_server_client.Client.transformers.snakeCaseObjectKeys(params)
    );
    return {
      errorCode: `${resp.data["error-code"]}`,
      errorCodeLabel: resp.data["error-code-label"]
    };
  }
  /**
   * Cancel a phone number.
   *
   * @param {NumbersParams} params - The parameters for canceling a number.
   * @return {Promise<NumbersEmptyResponse>} A promise that resolves to an empty response or an error response.
   *
   * @example
   * Cancel a phone number
   *
   * ```ts
   *
   * const resp = await numbersClient.cancelNumber({
   *  msisdn: '15555555555'
   * });
   *
   * if (resp.errorCode) {
   *   console.log(`Error: ${resp.errorCodeLabel}`);
   * } else {
   *   console.log('Number cancled successfully');
   * }
   * ```
   */
  async cancelNumber(params) {
    const resp = await this.sendFormSubmitRequest(
      `${this.config.restHost}/number/cancel`,
      import_server_client.Client.transformers.snakeCaseObjectKeys(params)
    );
    return {
      errorCode: `${resp.data["error-code"]}`,
      errorCodeLabel: resp.data["error-code-label"]
    };
  }
  /**
   * Retrieves a list of available phone numbers based on the provided filter criteria.
   *
   * @param {NumbersSearchFilter} filter - The filter criteria for searching available numbers.
   * @return {Promise<NumbersAvailableList>} A promise that resolves to a list of available phone numbers or an error response.
   *
   * @example
   * Search for available numbers that can send SMS and make voice calls
   * ```ts
   * import { Country, Feature } from '@vonage/numbers';
   *
   * const resp = await numbersClient.getAvailableNumbers({
   *   country: Country.US,
   *   features: [Feature.SMS, Feature.VOICE],
   * });
   *
   * console.log(`There are ${resp.count} numbers available`);
   *
   * for (const number of resp.numbers) {
   *   console.log(number.msisdn);
   *   console.log(number.cost);
   *   console.log(number.type);
   * }
   * ```
   */
  async getAvailableNumbers(filter) {
    (0, import_lodash.default)(
      import_server_client.Client.transformers.snakeCaseObjectKeys({
        ...filter,
        ...buildSearch(filter),
        country: filter.country
      }),
      ["starts_with", "contains", "ends_with", "search_pattern"]
    );
    const resp = await this.sendGetRequest(
      `${this.config.restHost}/number/search`,
      {
        ...filter.country ? { country: filter.country } : {},
        ...filter.type ? { type: filter.type } : {},
        ...filter.size ? { size: filter.size } : {},
        ...filter.index ? { index: filter.index } : {},
        ...buildSearch(filter),
        ...filter.features ? { features: sortFeatures(filter.features) } : {}
      }
    );
    return resp.data;
  }
  /**
   * Retrieves a list of owned phone numbers based on the provided filter criteria.
   *
   * @param {NumbersOwnedFilter} [filter] - The filter criteria for searching owned numbers.
   * @return {Promise<NumbersOwnedList>} A promise that resolves to a list of owned phone numbers or an error response.
   * @example
   * Search for owned numbers
   * ```ts
   * const resp = await numbersClient.getOwnedNumbers();
   * console.log(`There are ${resp.count} numbers owned`);
   * for (const number of resp.numbers) {
   *   console.log(number.msisdn);
   *   console.log(number.type);
   * }
   * ```
   */
  async getOwnedNumbers(filter) {
    if (!filter) {
      filter = {};
    }
    const resp = await this.sendGetRequest(
      `${this.config.restHost}/account/numbers`,
      import_server_client.Client.transformers.snakeCaseObjectKeys(filter)
    );
    return resp.data;
  }
  /**
   * Updates the settings of a phone number.
   *
   * @param {NumbersUpdateParams} [params] - The parameters for updating a phone number.
   * @return {Promise<NumbersEmptyResponse>} A promise that resolves to an empty response or an error response.
   *
   * @example
   *
   * ```ts
   * const resp = await numbersClient.updateNumber({
   *   msisdn: '15555555555',
   *   voiceCallbackType: 'app',
   *   voiceCallbackValue: 'APPLICATION_ID',
   *   voiceStatusCallback: 'https://example.com/webhooks/voice',
   * });
   *
   * if (resp.errorCode) {
   *   console.log(`Error: ${resp.errorCodeLabel}`);
   * } else {
   *   console.log('Number bought successfully');
   * }
   * ```
   */
  async updateNumber(params) {
    const appId = params.applicationId || params.appId;
    delete params.applicationId;
    delete params.appId;
    const resp = await this.sendFormSubmitRequest(
      `${this.config.restHost}/number/update`,
      {
        country: params.country,
        msisdn: params.msisdn,
        ...appId ? { app_id: appId } : {},
        moHttpUrl: params.moHttpUrl,
        moSmppSysType: params.moSmppSysType,
        voiceCallbackType: params.voiceCallbackType,
        voiceCallbackValue: params.voiceCallbackValue,
        voiceStatusCallback: params.voiceStatusCallback
      }
    );
    return {
      errorCode: `${resp.data["error-code"]}`,
      errorCodeLabel: resp.data["error-code-label"]
    };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Feature,
  LineType,
  MessagesCallbackTypeEnum,
  Numbers,
  SearchPattern,
  VoiceCallbackTypeEnum
});
