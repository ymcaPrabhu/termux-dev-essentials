"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/index.ts
var index_exports = {};
__export(index_exports, {
  CallerType: () => CallerType,
  LookupOutcome: () => LookupOutcome,
  NetworkType: () => NetworkType,
  NumberInsights: () => NumberInsights,
  Reachable: () => Reachable,
  ValidNumber: () => ValidNumber
});
module.exports = __toCommonJS(index_exports);

// lib/number-insights.ts
var import_server_client = require("@vonage/server-client");
var NumberInsights = class extends import_server_client.Client {
  /**
   * @see {@link Client.authType}
   */
  authType = import_server_client.AuthenticationType.BASIC;
  /**
   * Perform an advanced number lookup operation.
   *
   * @param {string} phoneNumber - The phone number to perform the lookup for.
   * @param {AdvancedLookupOptions} options - Additional options for the lookup.
   * @return {Promise<AdvancedResponse>} A promise that resolves to the advanced lookup response.
   * @example
   * ```ts
   * const lookup = await numberInsightsClient.advancedLookup('15555551212');
   * console.log(`Ths number is ${lookup.valid_number}`);
   * ```
   */
  async advancedLookup(phoneNumber, options) {
    const params = { number: phoneNumber, ...options };
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/ni/advanced/json`,
      params
    );
    return resp.data;
  }
  /**
   * Perform an asynchronous advanced number lookup operation.
   *
   * @param {string} phoneNumber - The phone number to perform the lookup for.
   * @param {string} callback - The callback URL for receiving the async lookup response.
   * @param {StandardLookupOptions} options - Additional options for the lookup.
   * @return {Promise<AsyncAdvancedResponse>} A promise that resolves to the async advanced lookup response.
   *
   * @example
   * ```ts
   * const lookup = await numberInsightsClient.asyncAdvancedLookup(
   *   '15555551212',
   *   'https://example.com/number-insights',
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   *
   * @example
   * Lookup with the CNAME option:
   * ```ts
   * const lookup = await numberInsightsClient.asyncAdvancedLookup(
   *   '15555551212',
   *   'https://example.com/number-insights',
   *   { cname: true },
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   */
  async asyncAdvancedLookup(phoneNumber, callback, options) {
    const params = { number: phoneNumber, callback, ...options };
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/ni/advanced/async/json`,
      params
    );
    return resp.data;
  }
  /**
   * Perform a basic number lookup operation.
   *
   * @param {string} phoneNumber - The phone number to perform the lookup for.
   * @param {BasicLookupOptions} options - Additional options for the lookup.
   * @return {Promise<BasicResponse>} A promise that resolves to the basic lookup response.
   *
   * @example
   * ```ts
   * const lookup = await numberInsightsClient.basicLookup(
   *   '15555551212',
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   *
   * @example
   * Lookup with the country option:
   * ```ts
   * const lookup = await numberInsightsClient.basicLookup(
   *   '15555551212',
   *   { country: 'US' },
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   */
  async basicLookup(phoneNumber, options) {
    const params = { number: phoneNumber, ...options };
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/ni/basic/json`,
      params
    );
    return resp.data;
  }
  /**
   * Perform a standard number lookup operation.
   *
   * @param {string} phoneNumber - The phone number to perform the lookup for.
   * @param {StandardLookupOptions} options - Additional options for the lookup.
   * @return {Promise<StandardResponse>} A promise that resolves to the standard lookup response.
   *
   * @example
   * ```ts
   * const lookup = await numberInsightsClient.standardLookup(
   *   '15555551212',
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   *
   * @example
   * Lookup with the cname option:
   * ```ts
   * const lookup = await numberInsightsClient.standardLookup(
   *   '15555551212',
   *   { cname: true },
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   */
  async standardLookup(phoneNumber, options) {
    const params = { number: phoneNumber, ...options };
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/ni/standard/json`,
      params
    );
    return resp.data;
  }
};

// lib/enums/CallerType.ts
var CallerType = /* @__PURE__ */ ((CallerType2) => {
  CallerType2["UNKNOWN"] = "unknown";
  CallerType2["BUSINESS"] = "business";
  CallerType2["CONSUMER"] = "consumer";
  return CallerType2;
})(CallerType || {});

// lib/enums/LookupOutcome.ts
var LookupOutcome = /* @__PURE__ */ ((LookupOutcome2) => {
  LookupOutcome2[LookupOutcome2["SUCCESS"] = 0] = "SUCCESS";
  LookupOutcome2[LookupOutcome2["PARTIAL_SUCCESS"] = 1] = "PARTIAL_SUCCESS";
  LookupOutcome2[LookupOutcome2["FAILED"] = 2] = "FAILED";
  return LookupOutcome2;
})(LookupOutcome || {});

// lib/enums/NetworkType.ts
var NetworkType = /* @__PURE__ */ ((NetworkType2) => {
  NetworkType2["MOBILE"] = "mobile";
  NetworkType2["LANDLINE"] = "landline";
  NetworkType2["LANDLINE_PREMIUM"] = "landline_premium";
  NetworkType2["LANDLINE_TOLLFREE"] = "landline_tollfree";
  NetworkType2["VIRTUAL"] = "virtual";
  NetworkType2["UNKNOWN"] = "unknown";
  NetworkType2["PAGER"] = "pager";
  return NetworkType2;
})(NetworkType || {});

// lib/enums/Reachable.ts
var Reachable = /* @__PURE__ */ ((Reachable2) => {
  Reachable2["UNKNOWN"] = "unknown";
  Reachable2["REACHABLE"] = "reachable";
  Reachable2["UNDELIVERABLE"] = "undeliverable";
  Reachable2["ABSENT"] = "absent";
  Reachable2["BAD_NUMBER"] = "bad_number";
  Reachable2["BLACKLISTED"] = "blacklisted";
  return Reachable2;
})(Reachable || {});

// lib/enums/ValidNumber.ts
var ValidNumber = /* @__PURE__ */ ((ValidNumber2) => {
  ValidNumber2["UNKNOWN"] = "unknown";
  ValidNumber2["VALID"] = "valid";
  ValidNumber2["NOT_VALID"] = "not_valid";
  ValidNumber2["INFERRED"] = "inferred";
  ValidNumber2["INFERRED_NOT_VALID"] = "inferred_not_valid";
  return ValidNumber2;
})(ValidNumber || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CallerType,
  LookupOutcome,
  NetworkType,
  NumberInsights,
  Reachable,
  ValidNumber
});
