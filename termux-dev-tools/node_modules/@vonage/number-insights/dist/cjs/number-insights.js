"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/number-insights.ts
var number_insights_exports = {};
__export(number_insights_exports, {
  NumberInsights: () => NumberInsights
});
module.exports = __toCommonJS(number_insights_exports);
var import_server_client = require("@vonage/server-client");
var NumberInsights = class extends import_server_client.Client {
  /**
   * @see {@link Client.authType}
   */
  authType = import_server_client.AuthenticationType.BASIC;
  /**
   * Perform an advanced number lookup operation.
   *
   * @param {string} phoneNumber - The phone number to perform the lookup for.
   * @param {AdvancedLookupOptions} options - Additional options for the lookup.
   * @return {Promise<AdvancedResponse>} A promise that resolves to the advanced lookup response.
   * @example
   * ```ts
   * const lookup = await numberInsightsClient.advancedLookup('15555551212');
   * console.log(`Ths number is ${lookup.valid_number}`);
   * ```
   */
  async advancedLookup(phoneNumber, options) {
    const params = { number: phoneNumber, ...options };
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/ni/advanced/json`,
      params
    );
    return resp.data;
  }
  /**
   * Perform an asynchronous advanced number lookup operation.
   *
   * @param {string} phoneNumber - The phone number to perform the lookup for.
   * @param {string} callback - The callback URL for receiving the async lookup response.
   * @param {StandardLookupOptions} options - Additional options for the lookup.
   * @return {Promise<AsyncAdvancedResponse>} A promise that resolves to the async advanced lookup response.
   *
   * @example
   * ```ts
   * const lookup = await numberInsightsClient.asyncAdvancedLookup(
   *   '15555551212',
   *   'https://example.com/number-insights',
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   *
   * @example
   * Lookup with the CNAME option:
   * ```ts
   * const lookup = await numberInsightsClient.asyncAdvancedLookup(
   *   '15555551212',
   *   'https://example.com/number-insights',
   *   { cname: true },
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   */
  async asyncAdvancedLookup(phoneNumber, callback, options) {
    const params = { number: phoneNumber, callback, ...options };
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/ni/advanced/async/json`,
      params
    );
    return resp.data;
  }
  /**
   * Perform a basic number lookup operation.
   *
   * @param {string} phoneNumber - The phone number to perform the lookup for.
   * @param {BasicLookupOptions} options - Additional options for the lookup.
   * @return {Promise<BasicResponse>} A promise that resolves to the basic lookup response.
   *
   * @example
   * ```ts
   * const lookup = await numberInsightsClient.basicLookup(
   *   '15555551212',
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   *
   * @example
   * Lookup with the country option:
   * ```ts
   * const lookup = await numberInsightsClient.basicLookup(
   *   '15555551212',
   *   { country: 'US' },
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   */
  async basicLookup(phoneNumber, options) {
    const params = { number: phoneNumber, ...options };
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/ni/basic/json`,
      params
    );
    return resp.data;
  }
  /**
   * Perform a standard number lookup operation.
   *
   * @param {string} phoneNumber - The phone number to perform the lookup for.
   * @param {StandardLookupOptions} options - Additional options for the lookup.
   * @return {Promise<StandardResponse>} A promise that resolves to the standard lookup response.
   *
   * @example
   * ```ts
   * const lookup = await numberInsightsClient.standardLookup(
   *   '15555551212',
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   *
   * @example
   * Lookup with the cname option:
   * ```ts
   * const lookup = await numberInsightsClient.standardLookup(
   *   '15555551212',
   *   { cname: true },
   * );
   * console.log(`The request ID is ${lookup.request_id}`);
   * ```
   */
  async standardLookup(phoneNumber, options) {
    const params = { number: phoneNumber, ...options };
    const resp = await this.sendGetRequest(
      `${this.config.apiHost}/ni/standard/json`,
      params
    );
    return resp.data;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NumberInsights
});
