"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/index.ts
var index_exports = {};
__export(index_exports, {
  AlgorithmTypes: () => AlgorithmTypes,
  Auth: () => Auth,
  InvalidApiKeyError: () => InvalidApiKeyError,
  InvalidApiSecretError: () => InvalidApiSecretError,
  InvalidSignatureAlgorithmError: () => InvalidSignatureAlgorithmError,
  MissingApiKeyError: () => MissingApiKeyError,
  MissingApiSecretError: () => MissingApiSecretError,
  MissingSignatureError: () => MissingSignatureError
});
module.exports = __toCommonJS(index_exports);

// lib/auth.ts
var import_jwt = require("@vonage/jwt");
var import_node_crypto = require("crypto");
var import_node_fs = require("fs");

// lib/enums/AlgroithmTypes.ts
var AlgorithmTypes = /* @__PURE__ */ ((AlgorithmTypes2) => {
  AlgorithmTypes2["md5hash"] = "MD5HASH";
  AlgorithmTypes2["md5hmac"] = "MD5HMAC";
  AlgorithmTypes2["sha1hmac"] = "SHA1HMAC";
  AlgorithmTypes2["sha256hmac"] = "SHA256HMAC";
  AlgorithmTypes2["sha512hmac"] = "SHA512HMAC";
  return AlgorithmTypes2;
})(AlgorithmTypes || {});

// lib/errors/InvalidApiKeyError.ts
var InvalidApiKeyError = class extends Error {
  constructor() {
    super("API Key must be a string");
  }
};

// lib/errors/InvalidApiSecretError.ts
var InvalidApiSecretError = class extends Error {
  constructor() {
    super("API Secret must be a string");
  }
};

// lib/errors/InvalidSignatureAlgroithmError.ts
var InvalidSignatureAlgorithmError = class extends Error {
  constructor() {
    super("Invalid Signature algorithm");
  }
};

// lib/errors/MissingApiKeyError.ts
var MissingApiKeyError = class extends Error {
  constructor() {
    super("Missing API Key");
  }
};

// lib/errors/MissingApiSecretError.ts
var MissingApiSecretError = class extends Error {
  constructor() {
    super("Missing API Secret");
  }
};

// lib/errors/MissingSignatureError.ts
var MissingSignatureError = class extends Error {
  constructor() {
    super("Missing signature algorithm");
  }
};

// lib/auth.ts
var import_debug = __toESM(require("debug"));
var log = (0, import_debug.default)("vonage:auth");
var Auth = class {
  /**
   * @property {string} apiKey - The API key used for authentication.
   */
  apiKey;
  /**
   * @property {string} apiSecret - The API secret used for authentication.
   */
  apiSecret;
  /**
   * @property {string | null} [privateKey] - The private key used for JWT
   *     authentication, either as a string or read from a file.
   */
  privateKey;
  /**
   * @property {string | null} [applicationId] - The application ID used for
   *     JWT authentication.
   */
  applicationId;
  /**
   * @property {SignedHashParams | null} [signature] - The signature parameters
   *     used for signature authentication.
   */
  signature;
  /**
   * @property {GeneratorOptions} jwtOptions - Options used for generating JWTs.
   */
  jwtOptions;
  constructor(opts) {
    this.apiKey = opts?.apiKey || "";
    this.apiSecret = opts?.apiSecret || "";
    this.signature = opts?.signature || null;
    this.applicationId = opts?.applicationId || null;
    this.jwtOptions = opts?.jwtOptions || {};
    let privateKey = opts?.privateKey;
    if ((0, import_node_fs.existsSync)(opts?.privateKey)) {
      log("Reading private key file");
      privateKey = (0, import_node_fs.readFileSync)(opts?.privateKey).toString();
    }
    this.privateKey = privateKey instanceof Buffer ? privateKey.toString() : privateKey;
  }
  /**
   * Generates query parameters for authentication, optionally merging with
   * provided parameters.
   *
   *
   * @param {T} [params] - Additional parameters to merge with the
   *     generated authentication query parameters.
   *
   * @return {Promise<AuthQueryParams>} - A promise that resolves
   *     with the merged authentication query parameters.
   *
   * @throws {MissingApiKeyError} - Thrown when the API key is missing.
   * @throws {MissingApiSecretError} - Thrown when the API secret is missing.
   * @throws {InvalidApiKeyError} - Thrown when the API key is not a valid string.
   * @throws {InvalidApiSecretError} - Thrown when the API secret is not a valid string.
   *
   * @example
   * Generate query parameters
   *
   * ```ts
   * const queryParams = await auth.getQueryParams();
   * ```
   *
   * @example
   * Generate query parameters and merge with additional Parameters
   *
   * ```ts
   * const queryParams = await auth.getQueryParams({
   *   to: '15555555555',
   *   from: '15555555556',
   *   text: 'Hello from Vonage SMS API'
   * });
   * ```
   */
  getQueryParams = async (params) => {
    if (!this.apiKey) {
      throw new MissingApiKeyError();
    }
    if (!this.apiSecret) {
      throw new MissingApiSecretError();
    }
    if (typeof this.apiKey !== "string") {
      throw new InvalidApiKeyError();
    }
    if (typeof this.apiSecret !== "string") {
      throw new InvalidApiSecretError();
    }
    return {
      ...params,
      api_key: this.apiKey,
      api_secret: this.apiSecret
    };
  };
  /**
   * Generates a basic authentication header.
   *
   * @return {Promise<string>} - A promise that resolves with the
   *     generated basic authentication header.
   *
   * @throws {MissingApiKeyError} - Thrown when the API key is missing.
   * @throws {MissingApiSecretError} - Thrown when the API secret is missing.
   * @throws {InvalidApiKeyError} - Thrown when the API key is not a valid string.
   * @throws {InvalidApiSecretError} - Thrown when the API secret is not a valid string.
   *
   * @example
   * Generate a basic authentication headers
   *
   * ```ts
   * const basicAuthHeader = await auth.createBasicHeader();
   * ```
   */
  createBasicHeader = async () => {
    log("Creating basic auth header");
    if (!this.apiKey) {
      throw new MissingApiKeyError();
    }
    if (!this.apiSecret) {
      throw new MissingApiSecretError();
    }
    if (typeof this.apiKey !== "string") {
      throw new InvalidApiKeyError();
    }
    if (typeof this.apiSecret !== "string") {
      throw new InvalidApiSecretError();
    }
    const buf = Buffer.from(`${this.apiKey}:${this.apiSecret}`);
    return `Basic ${buf.toString("base64")}`;
  };
  /**
   * Generates a bearer authentication header.
   *
   * @return {Promise<string>} - A promise that resolves with the
   *     generated bearer authentication header.
   *
   * @example
   * Generate a bearer authentication headers
   *
   * ```ts
   * const bearerAuthHeader = await auth.createBearerHeader();
   * ```
   */
  createBearerHeader = async () => {
    log("Creating bearer header");
    return `Bearer ${(0, import_jwt.tokenGenerate)(
      this.applicationId || "",
      this.privateKey || "",
      this.jwtOptions
    )}`;
  };
  /**
   * Generates a signature hash for authentication, merging it with
   * provided parameters.
   *
   * @template T - Type of the parameters to merge with.
   * @param {T} params - Parameters to merge with the generated
   *     signature hash.
   * @return {Promise<AuthSignedParams>} - A promise that resolves
   *     with the merged signature hash and parameters.
   *
   * @throws {MissingApiKeyError} - Thrown when the API key is missing.
   * @throws {InvalidApiKeyError} - Thrown when the API key is not a valid string.
   * @throws {MissingSignatureError} - Thrown when the signature algorithm is missing.
   * @throws {MissingApiSecretError} - Thrown when the API secret is missing.
   * @throws {InvalidApiSecretError} - Thrown when the API secret is not a valid string.
   * @throws {InvalidSignatureAlgorithmError} - Thrown when an invalid signature algorithm is provided.
   *
   * @example
   * Generate a signature hash
   *
   * ```ts
   * const signatureHash = await auth.createSignatureHash({
   *   to: '15555555555',
   *   from: '15555555556',
   *   text: 'Hello from Vonage SMS API',
   *   timestamp: '1516878400',
   *   sig: 'a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6',
   * });
   * ```
   */
  createSignatureHash = async (params) => {
    log("Creating signature hash");
    if (!this.apiKey) {
      throw new MissingApiKeyError();
    }
    if (typeof this.apiKey !== "string") {
      throw new InvalidApiKeyError();
    }
    if (!this.signature?.algorithm) {
      throw new MissingSignatureError();
    }
    if (!this.signature?.secret) {
      throw new MissingApiSecretError();
    }
    if (typeof this.signature?.secret !== "string") {
      throw new InvalidApiSecretError();
    }
    const returnParams = {
      ...params,
      api_key: this.apiKey
    };
    if (!returnParams.timestamp) {
      returnParams.timestamp = Math.floor(Date.now() / 1e3).toString();
    }
    const sortedParams = new URLSearchParams(returnParams);
    sortedParams.sort();
    const stringifiedParamsforSigning = sortedParams.toString().replace(/(&|=)/gi, "_");
    switch (this.signature.algorithm) {
      case "MD5HASH" /* md5hash */:
        returnParams.sig = (0, import_node_crypto.createHash)("md5").update(`${stringifiedParamsforSigning}${this.signature.secret}`).digest("hex");
        break;
      case "MD5HMAC" /* md5hmac */:
        returnParams.sig = (0, import_node_crypto.createHmac)("md5", this.signature.secret).update(stringifiedParamsforSigning).digest("hex");
        break;
      case "SHA1HMAC" /* sha1hmac */:
        returnParams.sig = (0, import_node_crypto.createHmac)("sha1", this.signature.secret).update(stringifiedParamsforSigning).digest("hex");
        break;
      case "SHA256HMAC" /* sha256hmac */:
        returnParams.sig = (0, import_node_crypto.createHmac)("sha256", this.signature.secret).update(stringifiedParamsforSigning).digest("hex");
        break;
      case "SHA512HMAC" /* sha512hmac */:
        returnParams.sig = (0, import_node_crypto.createHmac)("sha512", this.signature.secret).update(stringifiedParamsforSigning).digest("hex");
        break;
      default:
        throw new InvalidSignatureAlgorithmError();
    }
    return returnParams;
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AlgorithmTypes,
  Auth,
  InvalidApiKeyError,
  InvalidApiSecretError,
  InvalidSignatureAlgorithmError,
  MissingApiKeyError,
  MissingApiSecretError,
  MissingSignatureError
});
