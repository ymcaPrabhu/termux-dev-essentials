"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/errors/index.ts
var errors_exports = {};
__export(errors_exports, {
  InvalidApiKeyError: () => InvalidApiKeyError,
  InvalidApiSecretError: () => InvalidApiSecretError,
  InvalidSignatureAlgorithmError: () => InvalidSignatureAlgorithmError,
  MissingApiKeyError: () => MissingApiKeyError,
  MissingApiSecretError: () => MissingApiSecretError,
  MissingSignatureError: () => MissingSignatureError
});
module.exports = __toCommonJS(errors_exports);

// lib/errors/InvalidApiKeyError.ts
var InvalidApiKeyError = class extends Error {
  constructor() {
    super("API Key must be a string");
  }
};

// lib/errors/InvalidApiSecretError.ts
var InvalidApiSecretError = class extends Error {
  constructor() {
    super("API Secret must be a string");
  }
};

// lib/errors/InvalidSignatureAlgroithmError.ts
var InvalidSignatureAlgorithmError = class extends Error {
  constructor() {
    super("Invalid Signature algorithm");
  }
};

// lib/errors/MissingApiKeyError.ts
var MissingApiKeyError = class extends Error {
  constructor() {
    super("Missing API Key");
  }
};

// lib/errors/MissingApiSecretError.ts
var MissingApiSecretError = class extends Error {
  constructor() {
    super("Missing API Secret");
  }
};

// lib/errors/MissingSignatureError.ts
var MissingSignatureError = class extends Error {
  constructor() {
    super("Missing signature algorithm");
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  InvalidApiKeyError,
  InvalidApiSecretError,
  InvalidSignatureAlgorithmError,
  MissingApiKeyError,
  MissingApiSecretError,
  MissingSignatureError
});
