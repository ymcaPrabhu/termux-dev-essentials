"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/tokenGenerate.ts
var tokenGenerate_exports = {};
__export(tokenGenerate_exports, {
  tokenGenerate: () => tokenGenerate,
  validateOptions: () => validateOptions
});
module.exports = __toCommonJS(tokenGenerate_exports);
var import_jsonwebtoken = __toESM(require("jsonwebtoken"));
var import_uuid = require("uuid");

// lib/errors/invalidApplicationIdError.ts
var InvalidApplicationIdError = class extends Error {
  constructor() {
    super("Invalid Application Id");
  }
};

// lib/errors/invalidPrivateKeyError.ts
var InvalidPrivateKeyError = class extends Error {
  constructor() {
    super("Private key must be a string or buffer");
  }
};

// lib/errors/missingApplicationIdError.ts
var MissingApplicationIdError = class extends Error {
  constructor() {
    super("Missing application id");
  }
};

// lib/errors/missingPrivateKeyError.ts
var MissingPrivateKeyError = class extends Error {
  constructor() {
    super("Missing private key");
  }
};

// lib/tokenGenerate.ts
var import_debug = __toESM(require("debug"));
var { sign } = import_jsonwebtoken.default;
var log = (0, import_debug.default)("vonage:jwt:tokenGenerate");
var validateOptions = (opts) => {
  const now = parseInt((Date.now() / 1e3).toString(), 10);
  const ttl = opts?.ttl || 900;
  if (opts?.ttl) {
    delete opts.ttl;
  }
  const claims = {
    ...opts,
    jti: opts?.jti || (0, import_uuid.v4)(),
    iat: opts?.issued_at || now,
    exp: opts?.exp && opts?.exp > now ? opts.exp : now + ttl
  };
  if (opts?.subject) {
    claims.sub = opts.subject;
  }
  if (opts?.acl) {
    claims.acl = opts.acl;
  }
  return claims;
};
var tokenGenerate = (applicationId, privateKey, opts) => {
  log(`Application id: ${applicationId}`);
  log(`Private key: ${privateKey}`);
  if (!applicationId) {
    throw new MissingApplicationIdError();
  }
  if (!privateKey) {
    throw new MissingPrivateKeyError();
  }
  if (typeof applicationId !== "string") {
    throw new InvalidApplicationIdError();
  }
  if (typeof privateKey !== "string" && !(privateKey instanceof Buffer)) {
    throw new InvalidPrivateKeyError();
  }
  const claims = validateOptions(opts);
  log("Claims", claims);
  claims.application_id = applicationId;
  return sign(claims, privateKey, {
    algorithm: "RS256",
    header: { typ: "JWT", alg: "RS256" }
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  tokenGenerate,
  validateOptions
});
