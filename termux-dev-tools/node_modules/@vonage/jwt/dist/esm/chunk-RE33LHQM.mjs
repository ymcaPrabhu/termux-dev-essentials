import {
  MissingPrivateKeyError
} from "./chunk-ZA5447UK.mjs";
import {
  InvalidApplicationIdError
} from "./chunk-U2BK67V3.mjs";
import {
  InvalidPrivateKeyError
} from "./chunk-AU22SSAN.mjs";
import {
  MissingApplicationIdError
} from "./chunk-6PPQPS34.mjs";

// lib/tokenGenerate.ts
import jwt from "jsonwebtoken";
import { v4 as uuidv4 } from "uuid";
import debug from "debug";
var { sign } = jwt;
var log = debug("vonage:jwt:tokenGenerate");
var validateOptions = (opts) => {
  const now = parseInt((Date.now() / 1e3).toString(), 10);
  const ttl = opts?.ttl || 900;
  if (opts?.ttl) {
    delete opts.ttl;
  }
  const claims = {
    ...opts,
    jti: opts?.jti || uuidv4(),
    iat: opts?.issued_at || now,
    exp: opts?.exp && opts?.exp > now ? opts.exp : now + ttl
  };
  if (opts?.subject) {
    claims.sub = opts.subject;
  }
  if (opts?.acl) {
    claims.acl = opts.acl;
  }
  return claims;
};
var tokenGenerate = (applicationId, privateKey, opts) => {
  log(`Application id: ${applicationId}`);
  log(`Private key: ${privateKey}`);
  if (!applicationId) {
    throw new MissingApplicationIdError();
  }
  if (!privateKey) {
    throw new MissingPrivateKeyError();
  }
  if (typeof applicationId !== "string") {
    throw new InvalidApplicationIdError();
  }
  if (typeof privateKey !== "string" && !(privateKey instanceof Buffer)) {
    throw new InvalidPrivateKeyError();
  }
  const claims = validateOptions(opts);
  log("Claims", claims);
  claims.application_id = applicationId;
  return sign(claims, privateKey, {
    algorithm: "RS256",
    header: { typ: "JWT", alg: "RS256" }
  });
};

export {
  validateOptions,
  tokenGenerate
};
