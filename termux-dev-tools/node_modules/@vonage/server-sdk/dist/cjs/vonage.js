"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/vonage.ts
var vonage_exports = {};
__export(vonage_exports, {
  Vonage: () => Vonage
});
module.exports = __toCommonJS(vonage_exports);
var import_accounts = require("@vonage/accounts");
var import_applications = require("@vonage/applications");
var import_auth = require("@vonage/auth");
var import_messages = require("@vonage/messages");
var import_number_insights = require("@vonage/number-insights");
var import_numbers = require("@vonage/numbers");
var import_pricing = require("@vonage/pricing");
var import_redact = require("@vonage/redact");
var import_sms = require("@vonage/sms");
var import_users = require("@vonage/users");
var import_verify = require("@vonage/verify");
var import_verify2 = require("@vonage/verify2");
var import_voice = require("@vonage/voice");
var import_video = require("@vonage/video");
var import_conversations = require("@vonage/conversations");
var Vonage = class {
  /**
   * The credentials used for authentication.
   */
  credentials;
  /**
   * Optional configuration parameters.
   */
  options;
  /**
   * Provides access to the Accounts API.
   */
  accounts;
  /**
   * Provides access to the Applications API.
   */
  applications;
  /**
   * Provides access to the Messages API.
   */
  messages;
  /**
   * Provides access to the Number Insights API.
   */
  numberInsights;
  /**
   * Provides access to the Numbers API.
   */
  numbers;
  /**
   * Provides access to the Pricing API.
   */
  pricing;
  /**
   * Provides access to the Redact API.
   */
  redact;
  /**
   * Provides access to the Secrets API.
   */
  secrets;
  /**
   * Provides access to the SMS API.
   */
  sms;
  /**
   * Provides access to the Users API.
   */
  users;
  /**
   * Provides access to the Verify V2 API.
   */
  verify2;
  /**
   * Provides access to the Verify API.
   */
  verify;
  /**
   * Provides access to the Voice API.
   */
  voice;
  /**
   * Provides access to the Video API.
   */
  video;
  /**
   * Provides access to the Conversations API.
   */
  conversations;
  /**
   * The credentials used for authentication.
   * @param {AuthInterface} credentials - The authentication credentials.
   * @param {ConfigParams} [options] - Optional configuration parameters.
   */
  constructor(credentials, options) {
    if (!Object.prototype.hasOwnProperty.call(credentials, "getQueryParams")) {
      credentials = new import_auth.Auth(credentials);
    }
    this.credentials = credentials;
    this.options = options || {};
    this.accounts = new import_accounts.Accounts(this.credentials, this.options);
    this.applications = new import_applications.Applications(this.credentials, this.options);
    this.messages = new import_messages.Messages(this.credentials, this.options);
    this.numberInsights = new import_number_insights.NumberInsights(this.credentials, this.options);
    this.numbers = new import_numbers.Numbers(this.credentials, this.options);
    this.pricing = new import_pricing.Pricing(this.credentials, this.options);
    this.redact = new import_redact.Redact(this.credentials, this.options);
    this.secrets = new import_accounts.Secrets(this.credentials, this.options);
    this.sms = new import_sms.SMS(this.credentials, this.options);
    this.users = new import_users.Users(this.credentials, this.options);
    this.verify = new import_verify.Verify(this.credentials, this.options);
    this.verify2 = new import_verify2.Verify2(this.credentials, this.options);
    this.voice = new import_voice.Voice(this.credentials, this.options);
    this.video = new import_video.Video(this.credentials, this.options);
    this.conversations = new import_conversations.Conversations(this.credentials, this.options);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Vonage
});
