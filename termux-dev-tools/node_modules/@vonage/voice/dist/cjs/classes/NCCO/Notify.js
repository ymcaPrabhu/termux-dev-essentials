"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/classes/NCCO/Notify.ts
var Notify_exports = {};
__export(Notify_exports, {
  Notify: () => Notify
});
module.exports = __toCommonJS(Notify_exports);
var Notify = class {
  action = "notify" /* NOTIFY */;
  payload;
  eventUrl;
  eventMethod;
  /**
   * Creates a new Notify action.
   *
   * @param {Object} payload - The payload data to send with the notification.
   * @param {string} eventUrl - The URL where the notification events will be sent.
   * @param {string} [eventMethod] - The HTTP method for sending notification events (e.g., "POST").
   */
  constructor(payload, eventUrl, eventMethod) {
    this.payload = payload;
    this.eventUrl = [eventUrl];
    if (eventMethod) {
      this.eventMethod = eventMethod;
    }
  }
  /**
   * Serialize the Notify action to an NCCO-compatible format.
   *
   * @return {NotifyAction} - The serialized Notify action.
   */
  serializeToNCCO() {
    const data = {
      action: "notify" /* NOTIFY */,
      payload: this.payload,
      eventUrl: this.eventUrl
    };
    if (this.eventMethod) {
      data.eventMethod = this.eventMethod;
    }
    return data;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Notify
});
