"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/sms.ts
var sms_exports = {};
__export(sms_exports, {
  SMS: () => SMS
});
module.exports = __toCommonJS(sms_exports);
var import_server_client = require("@vonage/server-client");

// lib/classes/Error/SMSFailure.ts
var SMSFailure = class extends Error {
  /**
   * The response containing details about the SMS messages.
   */
  response;
  /**
   * Creates an instance of SMSFailure.
   *
   * @param {string} message - The error message.
   * @param {SMSMessages} response - The response containing details about the SMS messages.
   */
  constructor(message, response) {
    super(message);
    this.response = response;
  }
  /**
   * Retrieves an array of all messages in the response.
   *
   * @return {Array<ErrorMessage | Message>} An array of all messages in the response.
   */
  getMessages() {
    return this.response.messages || [];
  }
  /**
   * Retrieves an array of failed messages in the response.
   *
   * @return {Array<ErrorMessage>} An array of failed messages in the response.
   */
  getFailedMessages() {
    return this.getMessages().filter(
      ({ status }) => status !== "0" /* SUCCESS */
    );
  }
  /**
   * Retrieves the original response containing details about the SMS messages.
   *
   * @return {SMSMessages} The original response containing details about the SMS messages.
   */
  getResponse() {
    return this.response;
  }
  /**
   * Retrieves an array of successfully sent messages in the response.
   *
   * @return {Array<Message>} An array of successfully sent messages in the response.
   */
  getSuccessfulMessages() {
    return this.getMessages().filter(
      ({ status }) => status === "0" /* SUCCESS */
    );
  }
};

// lib/classes/Error/MessageSendAllFailure.ts
var MessageSendAllFailure = class extends SMSFailure {
  /**
   * Creates an instance of MessageSendAllFailure.
   *
   * @param {SMSMessages} response - The response containing details about the failed SMS messages.
   */
  constructor(response) {
    super("All SMS messages failed to send", response);
  }
};

// lib/classes/Error/MessageSendPartialFailure.ts
var MessageSendPartialFailure = class extends SMSFailure {
  /**
   * Creates an instance of MessageSendPartialFailure.
   *
   * @param {SMSMessages} response - The response containing details about the partially failed SMS messages.
   */
  constructor(response) {
    super("Some SMS messages failed to send", response);
  }
};

// lib/sms.ts
var import_crypto = __toESM(require("crypto"));
var import_auth = require("@vonage/auth");
var SMS = class extends import_server_client.Client {
  /**
   * @see {@link Client.authType}
   */
  authType = import_server_client.AuthenticationType.BASIC;
  /**
   * Sends an SMS message using the legacy Vonage SMS API.
   *
   * @param {SMSParams} [params] - The parameters for the SMS message.
   * @return {Promise<SMSMessages>} A Promise that resolves to the response containing details about the sent SMS messages.
   * @throws {MessageSendAllFailure} If all SMS messages fail to send.
   * @throws {MessageSendPartialFailure} If some SMS messages fail to send.
   * @example
   *
   * ```ts
   * const response = await smsClient.send({
   *   to: TO_NUMBER,
   *   from: FROM_NUMBER,
   *   text: 'Hello from Vonage SMS API',
   * });
   * console.log(`Number of messages sent: ${response.messageCount}`););
   * ```
   */
  async send(params) {
    const resp = await this.sendPostRequest(
      `${this.config.restHost}/sms/json`,
      import_server_client.Client.transformers.kebabCaseObjectKeys(params || {})
    );
    const messageData = import_server_client.Client.transformers.camelCaseObjectKeys(
      resp.data,
      true,
      true
    );
    const totalMessages = messageData.messageCount || 0;
    const messages = messageData.messages || [];
    const failures = messages.reduce(
      (failures2, { status }) => status !== "0" /* SUCCESS */ ? failures2 + 1 : failures2,
      0
    );
    if (failures < 1) {
      return messageData;
    }
    if (failures === totalMessages) {
      throw new MessageSendAllFailure(messageData);
    }
    throw new MessageSendPartialFailure(messageData);
  }
  /**
   * Verifies the signature of a request using the specified algorithm and signature secret.
   *
   * @remarks
   * This will not parse the request parameters from the request object, so you will need to do that yourself.
   *
   * @param {string} signature - The signature to be verified.
   * @param {Record<string, string>} params - The request parameters used to generate the signature.
   * @param {string} signatureSecret - The secret key used for generating the signature.
   * @param {AlgorithmTypes} algorithm - The algorithm used for generating the signature.
   * @return {boolean} `true` if the signature is valid, `false` otherwise.
   * @throws {Error} If the provided signature algorithm is not supported.
   *
   * @example
   * ```ts
   * const params = Object.assign(request.query, request.body);
   * const { sig } = params;
   *
   * sms.verifySignature(
   *   sig,
   *   {}, // request parameters
   *   VONAGE_API_SIGNATURE_SECRET,
   *   AlgorithmTypes.md5hash,
   * ) === params.sig) {
   *   console.log("Valid signature");
   * } else {
   *   console.log("Invalid signature");
   * }
   * ```
   */
  verifySignature(signature, params, signatureSecret, algorithm) {
    params = params || {};
    let signedQuery = "";
    params = JSON.parse(JSON.stringify(params));
    if (params.sig) {
      delete params.sig;
    }
    Object.keys(params).sort().forEach((key) => {
      signedQuery += "&" + key + "=" + params[key].replace(/[&=]/g, "_");
    });
    const hashMap = {};
    hashMap[import_auth.AlgorithmTypes.md5hmac] = "md5";
    hashMap[import_auth.AlgorithmTypes.sha1hmac] = "sha1";
    hashMap[import_auth.AlgorithmTypes.sha256hmac] = "sha256";
    hashMap[import_auth.AlgorithmTypes.sha512hmac] = "sha512";
    let hash = "";
    switch (algorithm) {
      case import_auth.AlgorithmTypes.md5hash:
        signedQuery += signatureSecret;
        hash = import_crypto.default.createHash("md5").update(signedQuery).digest("hex");
        break;
      case import_auth.AlgorithmTypes.md5hmac:
      case import_auth.AlgorithmTypes.sha1hmac:
      case import_auth.AlgorithmTypes.sha256hmac:
      case import_auth.AlgorithmTypes.sha512hmac:
        hash = import_crypto.default.createHmac(hashMap[algorithm], signatureSecret).update(signedQuery).digest("hex");
        break;
      default:
        throw new Error(
          `Unknown signature algorithm: ${algorithm}. Expected: md5hash, md5, sha1, sha256, or sha512`
        );
    }
    return signature.toUpperCase() === hash.toUpperCase();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SMS
});
