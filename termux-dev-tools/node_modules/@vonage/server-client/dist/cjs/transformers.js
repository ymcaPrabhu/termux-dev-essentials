"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// lib/transformers.ts
var transformers_exports = {};
__export(transformers_exports, {
  camelCaseObjectKeys: () => camelCaseObjectKeys,
  kebabCaseObjectKeys: () => kebabCaseObjectKeys,
  omit: () => omit,
  snakeCaseObjectKeys: () => snakeCaseObjectKeys,
  transformObjectKeys: () => transformObjectKeys
});
module.exports = __toCommonJS(transformers_exports);
var import_lodash = __toESM(require("lodash.camelcase"));
var import_lodash2 = __toESM(require("lodash.snakecase"));
var import_lodash3 = __toESM(require("lodash.kebabcase"));
var import_lodash4 = __toESM(require("lodash.isobject"));
var transformObjectKeys = (transformFn, objectToTransform, deep = false, preserve = false) => {
  const transformedObject = {
    ...preserve ? objectToTransform : {}
  };
  for (const prop in objectToTransform) {
    if (!Object.prototype.hasOwnProperty.call(objectToTransform, prop)) {
      continue;
    }
    const newKey = transformFn(prop);
    const value = objectToTransform[prop];
    if (!deep || !(0, import_lodash4.default)(value)) {
      transformedObject[newKey] = value;
      continue;
    }
    if (Array.isArray(value)) {
      transformedObject[newKey] = value.map(
        (t) => (0, import_lodash4.default)(t) ? transformObjectKeys(
          transformFn,
          t,
          deep,
          preserve
        ) : t
      );
      continue;
    }
    transformedObject[newKey] = transformObjectKeys(
      transformFn,
      value,
      deep,
      preserve
    );
  }
  return transformedObject;
};
var camelCaseObjectKeys = (...rest) => transformObjectKeys(
  import_lodash.default,
  ...rest
);
var snakeCaseObjectKeys = (...rest) => transformObjectKeys(
  import_lodash2.default,
  ...rest
);
var kebabCaseObjectKeys = (...rest) => transformObjectKeys(
  import_lodash3.default,
  ...rest
);
var omit = (keys, obj) => Object.fromEntries(
  Object.entries(obj).filter(([key]) => !keys.includes(key))
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  camelCaseObjectKeys,
  kebabCaseObjectKeys,
  omit,
  snakeCaseObjectKeys,
  transformObjectKeys
});
