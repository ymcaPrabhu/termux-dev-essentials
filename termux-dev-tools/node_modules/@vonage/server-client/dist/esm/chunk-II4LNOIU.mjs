import {
  Client
} from "./chunk-33MMNOH4.mjs";

// lib/fileClient.ts
import debug from "debug";
import { VetchError, HTTPMethods } from "@vonage/vetch";
import fetch from "node-fetch";
import { createWriteStream } from "fs";
import { pipeline } from "stream/promises";
var log = debug("vonage:file-client");
var FileClient = class extends Client {
  authType = "jwt" /* JWT */;
  saveFilePath = "";
  /**
   * Downloads a file from Vonage and saves it to a specified path.
   *
   * @param {string} file - The URL or ID of the file to be downloaded.
   * @param {string} path - The path where the downloaded file should be saved.
   *
   * @throws {Error} Throws an error if the file could not be downloaded or saved.
   *
   * @return {Promise<void>} Resolves when the file is successfully downloaded and saved.
   */
  async downloadFile(file, path) {
    log(`Downloading file: ${file}`);
    let fileURL;
    try {
      fileURL = new URL(file);
      log("Downloading file by URL");
    } catch (_) {
      log("Downloading file by ID");
      fileURL = new URL(`${this.config.apiHost}/v3/files/${file}`);
    }
    log(`File URL ${fileURL}`);
    const hostname = fileURL.hostname.split(".").slice(-2).join(".");
    if (!["vonage.com", "nexmo.com"].includes(hostname)) {
      throw new Error(
        `The domain ${fileURL} is invalid for file download. Only vonage.com and nexmo.com are allowed.`
      );
    }
    const request = await this.addAuthenticationToRequest({
      url: fileURL.toString(),
      method: HTTPMethods.GET
    });
    log("File download request", request);
    const response = await fetch(
      request.url,
      {
        method: request.method,
        headers: request.headers
      }
    );
    log("File download response", response);
    if (!response.ok) {
      throw new VetchError(
        `Unexpected response when downloading file: ${response.statusText}`,
        request
      );
    }
    log(`Saving to ${path}`);
    await pipeline(response.body, createWriteStream(path));
    log("File saved");
  }
};

export {
  FileClient
};
