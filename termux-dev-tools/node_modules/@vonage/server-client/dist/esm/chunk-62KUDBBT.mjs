// lib/transformers.ts
import camelCase from "lodash.camelcase";
import snakeCase from "lodash.snakecase";
import kebabCase from "lodash.kebabcase";
import isObject from "lodash.isobject";
var transformObjectKeys = (transformFn, objectToTransform, deep = false, preserve = false) => {
  const transformedObject = {
    ...preserve ? objectToTransform : {}
  };
  for (const prop in objectToTransform) {
    if (!Object.prototype.hasOwnProperty.call(objectToTransform, prop)) {
      continue;
    }
    const newKey = transformFn(prop);
    const value = objectToTransform[prop];
    if (!deep || !isObject(value)) {
      transformedObject[newKey] = value;
      continue;
    }
    if (Array.isArray(value)) {
      transformedObject[newKey] = value.map(
        (t) => isObject(t) ? transformObjectKeys(
          transformFn,
          t,
          deep,
          preserve
        ) : t
      );
      continue;
    }
    transformedObject[newKey] = transformObjectKeys(
      transformFn,
      value,
      deep,
      preserve
    );
  }
  return transformedObject;
};
var camelCaseObjectKeys = (...rest) => transformObjectKeys(
  camelCase,
  ...rest
);
var snakeCaseObjectKeys = (...rest) => transformObjectKeys(
  snakeCase,
  ...rest
);
var kebabCaseObjectKeys = (...rest) => transformObjectKeys(
  kebabCase,
  ...rest
);
var omit = (keys, obj) => Object.fromEntries(
  Object.entries(obj).filter(([key]) => !keys.includes(key))
);

export {
  transformObjectKeys,
  camelCaseObjectKeys,
  snakeCaseObjectKeys,
  kebabCaseObjectKeys,
  omit
};
